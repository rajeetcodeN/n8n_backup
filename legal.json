{
  "active": false,
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Get": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Delete": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "When chat message received",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Get1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Delete1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Drive7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive7": {
      "main": [
        [
          {
            "node": "Google Drive8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive8": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "S32",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S32": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-10T20:22:00.502Z",
  "id": "3bB3wyK95ehveQsU",
  "isArchived": false,
  "meta": null,
  "name": "legal",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! 👋\nHow can I assist you today?",
        "options": {
          "allowFileUploads": true,
          "loadPreviousSession": "memory",
          "subtitle": "",
          "title": "Welcome to Nosta!",
          "customCss": ":root {\n  /* Brand Colors (Nosta) */\n  --chat--color-primary: #009EE3; /* Nosta Azure‑blue */\n  --chat--color-primary-shade-50: #007bb8;\n  --chat--color-primary-shade-100: #005d8f;\n  --chat--color-secondary: #582DC6; /* Nosta Violet accent */\n  --chat--color-secondary-shade-50: #461fa1;\n  --chat--color-secondary-shade-100: #36197a;\n  --chat--color-white: #FFFFFF;\n  --chat--color-light: #E4E4E4; /* light grey surfaces & borders */\n  --chat--color-light-shade-50: #d1d1d1;\n  --chat--color-light-shade-100: #bdbdbd;\n  --chat--color-medium: #B5BCC9;\n  --chat--color-dark: #000000; /* solid black text */\n  --chat--color-disabled: #9FA6B2;\n  --chat--color-typing: #555555;\n  --chat--header-height: 4rem;\n\n  /* Layout & Fonts */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;\n  --chat--font-family: 'Roboto', system-ui, sans-serif;\n  --chat--heading-font-family: 'Poppins', system-ui, sans-serif;\n\n  /* Window */\n  --chat--window--width: 420px;\n  --chat--window--height: 600px;\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-100);\n  --chat--window--border-radius: var(--chat--border-radius);\n\n  /* Header */\n  --chat--header--padding: 0.75rem;                    /* 50% less height */\n  --chat--header--background: var(--chat--color-primary-shade-100); /* deeper blue */\n  --chat--header--color: var(--chat--color-white);\n  --chat--heading--font-size: 1.8em;\n  --chat--subtitle--font-size: 1rem;\n  --chat--subtitle--line-height: 1.5;\n\n  /* Messages */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: 0.8rem 1rem;\n  --chat--message--border-radius: var(--chat--border-radius);\n  --chat--message--margin-bottom: 0.35rem; /* less spacing */\n  --chat--message-line-height: 1.6;\n  --chat--message--bot--background: #97979738;\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--pre--background: #e8ecf1;\n\n  /* Input */\n  --chat--textarea--height: 52px;\n  --chat--input--background: var(--chat--color-white);\n  --chat--input--text-color: var(--chat--color-dark);\n  --chat--input--padding: 0.75rem 1rem;\n  --chat--input--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--input--border-radius: var(--chat--border-radius);\n\n  /* Buttons */\n  --chat--button--background: var(--chat--color-secondary);\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-secondary-shade-50);\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--padding: 0.5rem 1.2rem;\n  --chat--button--border-radius: var(--chat--border-radius);\n\n  /* Footer */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-white);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Structure */\nbody {\n  margin: 0;\n  font-family: var(--chat--font-family);\n  background: var(--chat--body--background);\n}\n\n.chat-window {\n  width: var(--chat--window--width);\n  height: var(--chat--window--height);\n  margin: 2rem auto;\n  border: var(--chat--window--border);\n  border-radius: var(--chat--window--border-radius);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n}\n\n.chat-layout .chat-header {\n    background-repeat: no-repeat;\n    background-size: contain;\n    background-position: right center;\n    background-image: url(https://www.nosta.com/wp-content/themes/kd-theme/resources/img/nosta.jpg);\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    gap: 1em;\n    height: var(--chat--header-height);\n    padding: var(--chat--header--padding);\n    background-color: var(--chat--header--background);\n    color: var(--chat--header--color);\n    border-top: var(--chat--header--border-top);\n    border-bottom: var(--chat--header--border-bottom);\n    border-left: var(--chat--header--border-left);\n    border-right: var(--chat--header--border-right);\n}\n\n.chat-logo {\n  height: 40px;\n  width: auto;\n}\n\n.chat-header-text h1 {\n  margin: 0;\n  font-family: var(--chat--heading-font-family);\n  font-weight: 600;\n  font-size: var(--chat--heading--font-size);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.chat-header-text p {\n  margin: 0.25rem 0 0;\n  font-size: var(--chat--subtitle--font-size);\n  line-height: var(--chat--subtitle--line-height);\n}\n\n/* Chat body */\n.chat-body {\n  flex: 1;\n  padding: var(--chat--spacing);\n  background: var(--chat--body--background);\n  overflow-y: auto;\n}\n\n.chat-message {\n  padding: var(--chat--message--padding);\n  margin-bottom: var(--chat--message--margin-bottom);\n  border-radius: var(--chat--message--border-radius);\n  font-size: var(--chat--message--font-size);\n  line-height: var(--chat--message-line-height);\n  max-width: 80%;\n  box-shadow: 0px 5px 9px 3px rgb(0 0 0 / 12%);\n  width: fit-content;\n}\n\n.chat-message.bot {\n  background: var(--chat--message--bot--background);\n  color: var(--chat--message--bot--color);\n  border-left: 3px solid var(--chat--color-primary);\n}\n\n.chat-message.user {\n  background: var(--chat--message--user--background);\n  color: var(--chat--message--user--color);\n  border-left: 3px solid var(--chat--color-secondary);\n  margin-left: auto;\n}\n\n/* Footer */\n.chat-footer {\n  background: var(--chat--footer--background);\n  padding: 0.5rem 1rem;\n  border-top: 1px solid var(--chat--color-light-shade-100);\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.chat-footer textarea {\n  flex-grow: 1;\n  resize: none;\n  padding: var(--chat--input--padding);\n  height: var(--chat--textarea--height);\n  border: var(--chat--input--border);\n  border-radius: var(--chat--input--border-radius);\n  font-family: var(--chat--font-family);\n  font-size: 1rem;\n  color: var(--chat--input--text-color);\n  background: var(--chat--input--background);\n}\n\n.chat-send-button {\n  background: var(--chat--button--background);\n  color: var(--chat--button--color);\n  border: none;\n  padding: var(--chat--button--padding);\n  border-radius: var(--chat--button--border-radius);\n  font-size: 1.25rem;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.chat-send-button:hover {\n  background: var(--chat--button--hover--background);\n}\n\nimg {\n    width: -webkit-fill-available;\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -2300,
        -140
      ],
      "id": "bebebf44-4740-4781-8be3-a03a41a805a0",
      "name": "When chat message received",
      "webhookId": "c9ec7097-c0e1-4336-a7dc-68a4241e4e9e"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "463448a5-b323-4682-8674-24bee0df163b",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1680,
        -140
      ],
      "id": "2e43f305-518a-4d2c-8b28-b807660a5f9f",
      "name": "If"
    },
    {
      "parameters": {
        "fieldToSplitOut": "$binary",
        "options": {
          "destinationFieldName": "data",
          "includeBinary": true
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1460,
        -220
      ],
      "id": "1e3d7506-a89b-44e4-aaa0-14f34addd1ba",
      "name": "Split Out"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "name": "include_images",
              "value": "false"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1020,
        -220
      ],
      "id": "10d3d10d-ce28-4990-89e3-b8826a0616db",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a Legal AI Agent working for the company \"nosta\", a German manufacturer of precision-milled parts. Your responsibility is to carefully analyze uploaded legal documents (e.g., contracts, NDAs, quality agreements) and verify them against the internal legal and business requirements of nosta.\n\n## All review criteria must be strictly based on the provided Legal AI Agent document (nosta policy guide). The agent must verify uploaded contracts against these specific instructions 1:1.\n\nAlways follow the steps and instructions below. Use only the tools provided.\n\n---\n\n🔧 Tool Usage Instructions\n\n- Document Access:  \n  Always use the `Supabase Get` tool to retrieve uploaded legal documents for analysis.\n\n- Document Deletion:  \n  If the user requests deletion of a document (single or all), use the `Supabase Delete` tool with the appropriate file reference(s).\n\n---\n\n📌 Step 1: Recognize Contract Type & Involved Parties\n\nClassify and summarize basic metadata:\n- Identify contract type: Framework Agreement, NDA, Quality Agreement (QAA), Logistics Agreement, Pricing Agreement, Tooling Agreement, etc.\n- Identify all parties: customer, supplier, subsidiaries.\n- Note contract term, renewal rules, and termination clauses.\n- Mention annexes, technical references, or external documents.\n\n---\n\n📌 Step 2: General Legal Compliance Review\n\nReview these standard legal elements:\n- Jurisdiction:  \n  Prefer “Amtsgericht Dillingen” or “Handelsgericht Augsburg”. If not possible, Swiss law is an acceptable alternative.\n\n- Confidentiality:  \n  Must comply with GHV Level 1–3:\n  - Level 1: Data can be shared with service providers.\n  - Level 2–3: Transfer may require customer approval.\n  Verify level and compliance.\n\n- Export Control / Sanctions:  \n  Must comply with EU Regulation 428/2009, EAR, and U.S. law. Flag any sanction-related language for review.\n\n- Compliance Clauses:  \n  Must include anti-corruption, CSR, and sustainability statements.\n\n- Data Protection:  \n  Must comply with GDPR. Pay attention to international data transfers.\n\n---\n\n📌 Step 3: Nosta-Specific Policy Compliance\n\nEvaluate document content based on nosta’s internal expectations:\n- The contract must allow project-specific flexibility.\n- Do not accept automatic obligations that harm nosta’s interests.\n- Material approval steps and forecast freeze periods must be defined.\n- Excess/shortfall delivery clauses should be deleted or flagged.\n- Process changes must require coordination with nosta’s production/purchasing teams.\n- Flexibility requirements must not bypass internal process limits.\n- Buyer must inspect incoming goods immediately and report issues.\n- Warranty clauses under the German BGB must be reviewed or rejected.\n- Nosta must retain the right to choose how to address defects (repair/replace).\n- Product recall, liability, and insurance obligations must be stated clearly.\n- Spare part pricing policies must be included.\n- Customer audit access must be limited to clearly defined areas.\n\n---\n\n📌 Step 4: Rate Risk Levels (Traffic Light System)\n\nApply a color-coded risk level for each clause:\n\n- 🔴 Critical  \n  Clause is harmful to nosta, unclear, or unacceptable. Requires revision or removal.\n\n- 🟡 Medium  \n  Clause may be acceptable but has risk. Should be clarified or negotiated.\n\n- 🟢 Green  \n  Clause complies with nosta’s internal and legal standards.\n\n✅ For each 🔴 or 🟡 clause, propose a better alternative or revision.\n\n---\n\n📌 Step 5: Answer User Questions Clearly\n\nWhen a user asks a question about the contract (e.g., \"Is the liability clause okay?\"):\n1. Use Supabase Get to retrieve the uploaded document.\n2. Locate the clause that matches the question.\n3. Compare it against nosta’s policies (above).\n4. Respond with:\n   - A quote of the relevant clause.\n   - Risk level (🔴, 🟡, 🟢).\n   - A short legal/business justification.\n   - A suggestion for improvement (if needed).\n\n---\n\n🧭 Final Guidelines\n\n- Respond in a professional, structured, and legally sound tone.\n- Avoid making assumptions not grounded in the document or nosta's policy.\n- Be concise, actionable, and confident in your recommendations.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -280,
        -240
      ],
      "id": "24ff30a5-4490-442b-8e9b-f16ba7805eb1",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -360,
        -20
      ],
      "id": "1939f792-ce2f-4c43-b1af-6894905e12c3",
      "name": "OpenAI Chat Model"
    },
    {
      "parameters": {
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -240,
        -20
      ],
      "id": "a922eb4f-daaf-4067-92e2-0bb7a84378ea",
      "name": "HTTP Request1",
      "disabled": true
    },
    {
      "parameters": {
        "tableId": "temp_table",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "fieldId": "file",
              "fieldValue": "={{ $json.data[0].parseJson().blocks }}"
            },
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $json.data[0].parseJson().source }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -800,
        -220
      ],
      "id": "91443ad9-f2ac-4c9b-b27a-ce36e0802754",
      "name": "Supabase"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -580,
        -140
      ],
      "id": "c5a8b2bb-32be-40fc-a7b9-25fd6d59ec12",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "temp_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('When chat message received').item.json.sessionId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -120,
        -20
      ],
      "id": "6a5fd936-bb7c-4dde-ac95-ce2b2d2a6c22",
      "name": "Supabase Get"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "temp_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "keyName": "file_name",
              "condition": "eq",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Field_Value', `Provide the file name to delete`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        0,
        -20
      ],
      "id": "bfe1aa3c-4b72-4103-a8f3-d2e7052668c8",
      "name": "Supabase Delete"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const binaryKeys = Object.keys(item.binary || {});\n  const firstKey = binaryKeys[0];\n\n  if (!firstKey) {\n    return item;\n  }\n\n  return {\n    json: item.json,\n    binary: {\n      data: item.binary[firstKey]\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1240,
        -220
      ],
      "id": "c1cf0ce3-7305-4e80-9c59-590bbcba1289",
      "name": "Code"
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -2040,
        80
      ],
      "id": "772b5d98-c093-4a1b-8585-c49cf2e0a2e4",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "463448a5-b323-4682-8674-24bee0df163b",
              "leftValue": "={{ $json.files }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1740,
        360
      ],
      "id": "e91eabcc-1f8a-4339-9e1c-41b1195f2cdd",
      "name": "If1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "$binary",
        "options": {
          "destinationFieldName": "data",
          "includeBinary": true
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1520,
        280
      ],
      "id": "57c66d9b-5448-41da-be37-101d1bed1ee3",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "name": "include_images",
              "value": "false"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1080,
        280
      ],
      "id": "b6a634e8-86ef-46bd-b34c-beb652404235",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a Legal AI Agent working for the company \"nosta\", a German manufacturer of precision-milled parts. Your responsibility is to carefully analyze uploaded legal documents (e.g., contracts, NDAs, quality agreements) and verify them against the internal legal and business requirements of nosta.\n\n## All review criteria must be strictly based on the provided Legal AI Agent document (nosta policy guide). The agent must verify uploaded contracts against these specific instructions 1:1.\n\nAlways follow the steps and instructions below. Use only the tools provided.\n\n---\n\n🔧 Tool Usage Instructions\n\n- Document Access:  \n  Always use the `Supabase Get` tool to retrieve uploaded legal documents for analysis.\n\n- Document Deletion:  \n  If the user requests deletion of a document (single or all), use the `Supabase Delete` tool with the appropriate file reference(s).\n\n{{ $json.data }}\n\n🧭 Final Guidelines\n\n- Respond in a professional, structured, and legally sound tone.\n- Avoid making assumptions not grounded in the document or nosta's policy.\n- Be concise, actionable, and confident in your recommendations.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -80,
        400
      ],
      "id": "3b9f74cd-30d7-472e-85e7-9e95f60e0066",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -220,
        620
      ],
      "id": "55668a27-ba7e-4a96-ab61-8d7a600cbdab",
      "name": "OpenAI Chat Model1"
    },
    {
      "parameters": {
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -100,
        620
      ],
      "id": "84f4744a-aa8c-4afa-ae66-400d7e20f67d",
      "name": "HTTP Request3",
      "disabled": true
    },
    {
      "parameters": {
        "tableId": "temp_table",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "fieldId": "file",
              "fieldValue": "={{ $json.data[0].parseJson().blocks }}"
            },
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $json.data[0].parseJson().source }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -860,
        280
      ],
      "id": "5ac36c33-9a6e-43f5-8f4c-49181f652053",
      "name": "Supabase1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -640,
        360
      ],
      "id": "50532ecf-677e-4416-a3a7-bf16d1735af8",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "temp_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('When chat message received').item.json.sessionId }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        20,
        620
      ],
      "id": "d12f6cbf-67e2-4d91-8c62-f3c4b53e81c1",
      "name": "Supabase Get1"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "temp_table",
        "filters": {
          "conditions": [
            {
              "keyName": "session_id",
              "condition": "eq",
              "keyValue": "={{ $('When chat message received').item.json.sessionId }}"
            },
            {
              "keyName": "file_name",
              "condition": "eq",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Field_Value', `Provide the file name to delete`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        140,
        620
      ],
      "id": "808ed845-d20a-4d3a-ad44-6af1506c9fd6",
      "name": "Supabase Delete1"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const binaryKeys = Object.keys(item.binary || {});\n  const firstKey = binaryKeys[0];\n\n  if (!firstKey) {\n    return item;\n  }\n\n  return {\n    json: item.json,\n    binary: {\n      data: item.binary[firstKey]\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        280
      ],
      "id": "04d69768-de33-490d-b959-2d9c8e226eb6",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "https://nsebtjqnfydjgjtigsiq.supabase.co/storage/v1/object/public/prompt//prompt.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1860,
        540
      ],
      "id": "37f7490a-3fb3-499d-a74c-ce27e8d717e6",
      "name": "HTTP Request5",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "not fullText contains 'prompt.txt'",
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "1a5pasFQv0aSzWbzuWM20BHSdLyR7TgLU",
            "mode": "list",
            "cachedResultName": "Legal Prompt",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1a5pasFQv0aSzWbzuWM20BHSdLyR7TgLU"
          },
          "whatToSearch": "files"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1600,
        760
      ],
      "id": "9232350e-d15b-4f07-a2e7-cd55f08a8b53",
      "name": "Google Drive7"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1380,
        760
      ],
      "id": "13e47d50-5cb3-4b5e-920e-e3098af02987",
      "name": "Google Drive8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "text"
            },
            {
              "name": "include_images",
              "value": "false"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1160,
        760
      ],
      "id": "1c268163-7c18-438d-9c2b-3be486d3db46",
      "name": "HTTP Request6"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=create a set of instruction from the user message. give output in english.\n\nhelp me write a good prompt for a Legal AI Agent I’m building in n8n for my company \"nosta\", a German manufacturer of precision-milled parts. The workflow is read,: the user uploads a legal document (like a contract or NDA) and asks questions. The AI should review the document and answer based on nosta's internal legal and business requirements. I’ve been told by the nosta legal team to use the attached guidance documents as the reference. The agent should check uploaded documents exactly 1:1 against this guidance.\n\nCan you write a clear and professional system prompt that tells the agent how to do this review properly? It should include:\n   * Identifying contract type and parties\n   *Checking legal compliance (jurisdiction, GDPR, export rules, CSR, etc.)\n   *Verifying nosta-specific clauses (like delivery, audits, warranties)\n   *Giving traffic light risk ratings \n   *Suggesting improvements for any risky or unclear clauses\n   *The agent’s tone should be professional, structured, and aligned with compliance standards.",
              "role": "system"
            },
            {
              "content": "={{ $json.data[0].text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -940,
        760
      ],
      "id": "a0b16fce-6abe-4b73-b9f9-d7820c5f2332",
      "name": "OpenAI1"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "message.content",
        "options": {
          "fileName": "prompt.txt"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -560,
        760
      ],
      "id": "20b69e74-d929-45d9-a18e-06c4e85dbb4d",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "prompt",
        "fileName": "=",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        -340,
        840
      ],
      "id": "350650ef-eed9-4463-b16e-b54c11792295",
      "name": "S32"
    }
  ],
  "origin": "n8n",
  "pinData": {
    "HTTP Request6": [
      {
        "json": {
          "data": [
            {
              "id": "83519b69-186c-4d76-8f11-915fa7fce146",
              "source": "Legal KI Agent 14072025.docx",
              "text": "Legal KI Agent\n\nStufe 1: Unterstützung bei Vertragsprüfung\n\nStufe 2: Befüllung der Vertragsunterlagen\n\nBeschreibung Geschäftsmodell nosta:\n\nHersteller von Präzisionsfrästeilen Standard und nach Zeichnung\n\nAmtsgericht Dillingen, Deutschland\nHandelsgericht Augsburg, Deutschland\n\n…\n\nGenerelle Rahmenbedingungen\n\nVom Speziellen zum Generellen – das projektspezifische zählt in der Regel\n\nAlle Für die Firma schädigende sowie zweifelhafte Anforderungen sind zu prüfen / ändern\n\nMehr und Minderbedarfklauseln sind hervorzuheben – empfehlung zu löschen\n\nKlauseln zu Materialfreigaben in Bezug auf Bestellungen und Mehrbedarfe zu prüfen und kalkulieren\n\nProzessanpassungen durch Schwankungen sind mit der Produktion / Einkaufsprozesse von nosta abzustimmen und einhergehen, vorherige Anpassungen sind nicht möglich und abzustellen\n\nFlexibilitätsanforderungen: Nur mit Prfung un in Abstimmung mit nosta NICHT nach definierten Kundenanforderung in Bezug auf nosta prozess\n\nVerpflichtungen für Kunden zu sofortige und vorab Wareneingangskontrollen bei Annahme und sofortige Meldung bei Qualitätsmängel\n\nMängelansprüche über BGB nicht akzeptabel bzw zu prüfen\n\nNacherfüllung nach BGB freie Wahl für den Lieferant bzw. ist abzustimmen MIT VORHERIGER Prüfung der Schuldfrage.\n\nVersicherung der Deckungssumme ist zu prüfen sowie Rückrufkostensumme zu prüfen.\n\nPreisklärung für Ersatzteillieferungen sind zu vollziehen\n\nIm Falle von Audits sind Zutrittberechtigungen für spezielle Bereiche individuell zu klären\n\nIm Falle von AGBs, Einkaufsbedingungen, andere Verweise sind diese noch einmal zu prüfen\n\nStrukturierte Aufgaben- und Prüfreihenfolge eines KI Legal Agenten (B2B Automotive | Zerspanung)\n\nVertragsart und Kontext erkennen\n\nKurzer Einleitungsprüfklausel/Grundregeln & Interesse nosta:\n\nKlassifizierung: Rahmenvertrag, Einzelvertrag, NDA, Qualitätssicherungsvereinbarung (QSV), Logistikvereinbarung, Preisvereinbarung, Tooling Agreement, etc.\n\nBeteiligte Parteien: Kunde, Lieferant, ggf. Tochtergesellschaften\n\nVertragslaufzeit & Kündigungsregelungen\n\nVertragsstruktur (Anlagen, Verweise, technische Ergänzungen)\n\nAllgemeine rechtliche Grundprüfung\n\nKurzer Einleitungsprüfklausel/Grundregeln & Interesse nosta:\n\nRechtssitz und Gerichtsstand\n\nGenerell Deutschland, bevorzugt Amtsgericht Dillingen, Handelsrecht Augsburg\n\nBei ausländischen Gerichtsständen Kompromiss: Schweizer Recht\n\nGeltendes Recht (Rechtswahlklausel)\n\nSalvatorische Klausel\n\nGenerell akzeptiert bzw. zu prüfen\n\nVertraulichkeitsregelungen\n\nNach GHV Level:\n\nLevel 1: Freigabe für Weitergabe an Dienstleister\n\nLevel 2: …\n\nLevel 3: Jeder Weitergabe von Daten muss vom Kunden freigegeben werden\n\nCompliance-Klauseln (z. B. Antikorruption, CSR, Nachhaltigkeit)\n\nZu prüfen und Details auszugeben\n\nExportkontrolle / Sanktionsprüfung\n(z. B. EAR, EU-VO 428/2009, US-Bezug in Verträgen)\n\nSanktionen sind generell zu vermeiden und zu prüfen\n\nAlle Arten von Saktionen sind kritisch\n\nHaftung & Gewährleistung\n\nAlle Themen sind kritisch und zu prüfen\n\nJedes unklare Formulierung sind herauszuheben\n\nAlle Klauseln welche mögliche Risiken / Haftung / Gewährleistungen in Bezug auf Ansprüche in Bezug auf Betriebsknowhow / Geheimnisse / Leistungen / USPs / Internas / etc beziehen sind herauszuheben, zu prüfen und anzupassen!\n\nDatenschutz (DSGVO/International Transfer)\n\nVertragsspezifische Prüfkriterien (B2B Automotive, Zerspanung)\n\nKurzer Einleitungsprüfklausel/Grundregeln & Interesse nosta:\n\nGenerelle Vertragsbedingungen müssen aus risikobetrachtung in bezug auf verbindlichkeiten aus nosta-sicht durch Materialfreigaben und/oder Freeze-Period „unveränderbare Vorschauzahlen / Zeiträume“ sichergestellt werden.\n\nA. Liefer- & Leistungsbedingungen\n\nLieferverpflichtung (Make-to-Print / Make-to-Stock / Forecast-Verpflichtung)\n\nLieferfristen, Verzug, Vertragsstrafen (Pönalen)\n\nLieferabrufe, Rahmenbedarfe, Flexibilitätsbänder\n\nMindestabnahmemengen / Abnahmeverpflichtungen\n\nB. Preise und Zahlungsbedingungen\n\nPreisgleitklauseln (z. B. Material, Energie, Lohn)\n\nZahlungsziele, Skonti, Fälligkeiten\n\nWährungsrisiko / Währungsklausel\n\nFakturierungsmodalitäten\n\nC. Werkzeuge / Vorrichtungen / Eigentumsvorbehalt\n\nEigentumsübergang / Eigentum beim Kunden\n\nWartung, Instandhaltung, Ersatz\n\nVersicherungspflichten für kundeneigene Betriebsmittel\n\nRückgabepflicht bei Vertragsende\n\nD. Qualitätsanforderungen\n\nVerweis auf IATF 16949, VDA 6.3, PPAP, EMPB\n\nAuditrechte des Kunden\n\nMeldepflichten bei Abweichungen\n\nRückverfolgbarkeit\n\n0-Fehler-Ziel / ppm-Regelung\n\nAbweichungsregelung (z. B. Nacharbeit, Sortierung)\n\nE. Haftung und Gewährleistung\n\nUmfang und Dauer der Gewährleistung\n\nVerjährungsfristen\n\nProdukthaftung (inkl. Rückrufkosten)\n\nBeschränkung der Haftung / Freistellung\n\nRegressansprüche (z. B. im Rahmen OEM-Rückruf)\n\nF. Änderungsmanagement\n\nÄnderungsanträge / Change Requests\n\nKosten- und Lieferzeitwirkungen\n\nMitwirkungspflichten des Kunden\n\nDokumentationspflichten\n\nG. Lieferunterbrechung / Force Majeure\n\nDefinition und Umfang höherer Gewalt\n\nReaktionszeiten, Mitteilungspflichten\n\nRechte bei längerem Ausfall\n\nH. Geistiges Eigentum / Zeichnungsrechte\n\nUmgang mit Kundenzeichnungen und -daten\n\nNutzungslizenzen / Einschränkungen\n\nGeheimhaltung technischer Dokumente\n\nIP-Rechte bei Neuentwicklungen\n\n4. Zusätzliche kritische Punkte für Zerspanungsunternehmen\n\nToleranzangaben, Werkstoffverantwortung, Prüfpflicht\n\nVorserienlieferung vs. Serienproduktion\n\nAnlaufmanagement (Ramp-up, Run@Rate, etc.)\n\nOutsourcing oder Sub-Sub-Lieferanten: Genehmigungspflicht?\n\n5. Risikoanalyse & Ampelkennzeichnung\n\nDer KI-Agent vergibt eine Risikokategorie je Abschnitt:\n\n🔴 Kritisch: Nicht marktüblich, hohe Haftung, unklare Regelung\n\n🟡 Mittel: Nachverhandlung empfohlen\n\n🟢 Unkritisch: Standard oder vorteilhaft\n\nZusätzlich: Vorschläge zur Anpassung/Verhandlung\n\n6. Ausgabeformate\n\nExecutive Summary: Für Geschäftsführung mit Ampelübersicht\n\nDetailanalyse: Vollständige Klauselprüfung mit Kommentaren\n\nRedline Vorschläge: Markierter Vertrag mit KI-Korrekturvorschlägen\n\nVerhandlungs-Checkliste: Übersicht der zu diskutierenden Punkte"
            }
          ]
        }
      }
    ],
    "OpenAI1": [
      {
        "json": {
          "index": 0,
          "message": {
            "role": "assistant",
            "content": "**Legal AI Agent Instructions for nosta**\n\n**Objective**: Assist nosta, a manufacturer of precision-milled parts, in conducting comprehensive legal document reviews with a focus on compliance and risk management. Follow the structured approach outlined below.\n\n1. **Document Review Initiation**\n\n   - Start by identifying the type of legal document (e.g., Framework Agreement, NDA, Quality Assurance Agreement) and the involved parties (client, suppliers, subsidiaries).\n   - Establish an understanding of the document's context, its duration, and termination clauses.\n\n2. **General Legal Compliance Check**\n\n   - Verify the jurisdiction and venue are consistent with nosta's preferences: generally Dillingen, preferably Augsburg in Germany. Cautions for foreign jurisdictions and consider Swiss law as a compromise.\n   - Confirm the presence of a legally sound choice of law clause and a severability clause.\n   - Review confidentiality clauses against nosta’s confidentiality levels and specific guidelines stated.\n   - Examine compliance clauses (anti-corruption, CSR, sustainability) for adherence to nosta's standards.\n   - Ensure export controls and sanction considerations align with regulations (e.g., EAR, EU 428/2009).\n\n3. **Specific nosta Clause Verification**\n\n   - Ensure clauses related to delivery obligations, responsiveness to orders, and economic fluctuations are in sync with nosta's procurement and production capacities.\n   - Confirm warranty, liability, and insurance coverage are sufficient and clearly outlined in the document, highlighting any deviations.\n   - Evaluate clauses related to pricing adjustments (materials, energy, wages), payment terms, and currency risks.\n\n4. **Detailed Analysis and Amendments**\n\n   - Conduct a thorough examination of quality requirements (references to IATF 16949, VDA 6.3) and audit rights, detailing any necessary alterations.\n   - Scrutinize intellectual property and confidentiality clauses related to client data and technical documents.\n   - Where applicable, assess and make recommendations for clauses on change management, force majeure, and specific machining tolerances.\n\n5. **Risk Assessment and Recommendations**\n\n   - Assign a risk category for each section:\n     - 🔴 Critical: Significant deviation from market norms, high liability, vague terms.\n     - 🟡 Moderate: Negotiation advised.\n     - 🟢 Uncritical: Standard or advantageous clauses.\n   - Offer specific recommendations for amendments in high-risk or ambiguous sections.\n\n6. **Deliverable Formats**\n\n   - Produce an Executive Summary for nosta’s executive team featuring a traffic light overview.\n   - Provide a detailed analysis including complete clause reviews with commentary.\n   - Supply a redline version of the document highlighting suggested corrections.\n   - Compile a negotiation checklist of key points for further discussion.\n\n**Agent's Tone**: Maintain a professional, structured communication style in alignment with compliance standards.",
            "refusal": null,
            "annotations": []
          },
          "logprobs": null,
          "finish_reason": "stop"
        }
      }
    ]
  },
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-10T20:22:00.509Z",
      "updatedAt": "2025-08-10T20:22:00.509Z",
      "role": "workflow:owner",
      "workflowId": "3bB3wyK95ehveQsU",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-08-10T20:22:09.000Z",
  "versionId": "fb5b4705-81f9-4ae0-8486-bd36470878f3"
}