{
  "active": true,
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Direct": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Follow-Up Prompt Generator Agent": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Google Drive2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-10T18:45:36.409Z",
  "id": "dCpuT0xi56nEX6MA",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "chat bot flow",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -440,
        100
      ],
      "id": "1b691fcf-ceb9-46cc-a688-651b02d8e419",
      "name": "When chat message received",
      "webhookId": "d536879e-1fa5-45f6-b106-25f580ea92f4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "frequencyPenalty": 1,
          "presencePenalty": 1,
          "temperature": 0.5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        380,
        220
      ],
      "id": "48d59d87-3163-46a8-a58d-f5648917c8aa",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        780,
        620
      ],
      "id": "b4d9311f-ffde-48f5-b0b1-6ba2921115b2",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fefb9175-75ea-4fbd-8725-d2a10a675dac",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -220,
        100
      ],
      "id": "91ececc6-ae52-44db-814a-6305bf8bb4cf",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93dbee73-1e37-4377-91df-73eb3760d4b9",
              "name": "que",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ],
      "id": "8925b20c-35fb-4db8-b5dc-5369a3d1a185",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8c5bd4cb-7170-4b98-9201-a96efa313c67",
              "name": "que",
              "value": "={{ $json.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        200
      ],
      "id": "fdfb7d3b-f9b6-48a6-b1d0-cb2833d1f059",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4fd70be3-d994-480b-8f3e-f91e379e76a9",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1296,
        100
      ],
      "id": "6cebbd81-1e05-4205-b146-f8a28f34364d",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        600,
        280
      ],
      "id": "a2c3c3ca-6cef-4864-baa8-26b76688fb67",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', `website url`, 'string') }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        1160,
        320
      ],
      "id": "335bb350-c300-438e-9ba5-ef2cc0c9e0ad",
      "name": "HTTP Request",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "n8n_test",
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', `Number of rows to return, default 4, max 10`, 'number') }}",
        "filters": {
          "conditions": [
            {
              "keyName": "content",
              "condition": "ilike",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Field_Value', `word to search, use \"*\" for wildcard placeholder, Example \"*ai*\"`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1120,
        620
      ],
      "id": "706ed8c4-64a3-444c-929f-fb76bcf5ca6d",
      "name": "Supabase Direct",
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        220,
        100
      ],
      "id": "a88b151a-e23e-4de1-8e82-506095dea98d",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.que }}",
        "options": {
          "systemMessage": "You are a website-embedded AI assistant.\n\nAlways follow these strict rules:\n\n1. First, use Supabase vector search (dense retrieval) to find related website content.\n2. Second, use Supabase direct search (sparse retrieval) to find exact match content.\n3. Both searches use the same website content database. Always perform both.\n4. Answer only using the site’s content. Keep answers very short and precise.\n5. If the user **explicitly mentions a blog** (e.g., \"send the blog on X\" or \"blog about Y\"), include a direct clickable link to that blog.\n6. If the user provides a URL, fetch and summarize or answer based on that page’s content.\n7. If the information is not found, say exactly: **“I couldn’t find that on this site.”**\n8. If the user asks a general question unrelated to the website, respond briefly and conversationally.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        680,
        100
      ],
      "id": "45741574-aa53-4186-ab16-1e4169d87fca",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "n8n_test",
        "toolDescription": "Get website related Data",
        "tableName": {
          "__rl": true,
          "value": "n8n_test",
          "mode": "list",
          "cachedResultName": "n8n_test"
        },
        "options": {
          "queryName": "match5_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        720,
        480
      ],
      "id": "ab69e9d2-55d4-4006-bede-e39f1ed6da1f",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        1544,
        320
      ],
      "id": "23f2126e-d9cc-4b6c-909b-ce7c9139f734",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Chatbot response: {{ $json.response }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Role\nYou are an AI assistant specialized in generating concise, highly relevant follow-up prompts (auto-suggestion responses) for a chatbot interface. Your objective is to enhance user engagement by suggesting what the user might naturally want to ask next, based on the chatbot’s latest response and the conversation history.\n\n# Context\nYou will receive:\n- The final chatbot response (the most recent message sent by the bot to the user).\n- The complete conversation history up to that point. \n\nYour task is to analyze both the final response and the preceding conversation to understand the user’s needs, intentions, and possible next steps. The follow-up prompts you generate should help the user continue the conversation seamlessly, clarify information, or explore related topics.\n\n# Examples\n\n#### Example 1:\n**Final bot response:**\n\"Your order has been shipped and is on its way.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Track my order\",\n  \"Order details\",\n  \"Cancel order\"\n]\n```\n\n#### Example 2:\n**Final bot response:**\n\"The weather today is sunny with a high of 28°C.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Tomorrow's forecast\",\n  \"Rain this week?\",\n  \"UV index\"\n]\n```\n\n#### Example 3:\n**Final bot response:**\n\"You can reset your password from the account settings page.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Reset password\",\n  \"Account help\",\n  \"Contact support\"\n]\n```\n\n# Strict Rules & Boundaries\n\n- **Context Awareness:** All prompts must be directly relevant to both the final bot response and the conversation.\n- **Relevance:** Suggestions should reflect what the user is most likely to ask next, based on the current context.\n- **Brevity:** Each prompt must be concise (ideally under 5 words).\n- **Actionable:** Write prompts as clickable suggestions that encourage further interaction.\n- **Format:** Output only a JSON array of strings, with no extra explanation, formatting, or text.\n- **No Repetition:** Do not repeat prompts already present in the conversation.\n- **No Questions for the AI:** Prompts should be phrased as user actions or queries, not as instructions for the AI.\n- **No Out-of-Scope Prompts:** Avoid generic or unrelated suggestions; keep all prompts tightly focused on the immediate context.\n- **Limit:** Always provide exactly 3 suggestions—never more, never fewer."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1516,
        100
      ],
      "id": "42fcc8e9-fa39-43a4-94b4-730a6ecbc42f",
      "name": "Follow-Up Prompt Generator Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\"prompt 1\", \"prompt 2\", \"prompt 3\"]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1664,
        320
      ],
      "id": "6d99f783-1d15-42e9-b966-2721d5ad13df",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2220,
        60
      ],
      "id": "d9454599-480b-4169-adb1-eb9cd95403c1",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1892,
        100
      ],
      "id": "09295913-7836-40ba-8d66-2b566dcef57c",
      "name": "Edit Fields3",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        120,
        1495
      ],
      "id": "4de03d8a-574c-4c5d-a012-9e397a3637e1",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "value": "={{ $json.modifiedTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "fb5382fb-03b2-4ea8-9557-4b6e176923ce",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        340,
        1220
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -320,
        1495
      ],
      "id": "d1bccd96-ad2b-4277-b5ad-f4084d80e4e5",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1220,
        1445
      ],
      "id": "53a7dfaa-b47e-44db-aa15-91fb9a0c6fef",
      "name": "Wait1",
      "webhookId": "29a6451b-8a53-4598-b4fe-e11241eb51ab"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $json.content.parseJson().metadata.source }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $json.content.parseJson().metadata.source_metadata_id }}"
              }
            ]
          }
        }
      },
      "id": "6e9d4600-a78f-4343-97fa-f5e33176a82e",
      "name": "Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2000,
        1692.5
      ]
    },
    {
      "parameters": {
        "chunkSize": 10000000
      },
      "id": "66e2f458-a648-4a49-812d-b62bb82e0bfa",
      "name": "Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2088,
        1890
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "n8n_test",
          "mode": "list",
          "cachedResultName": "n8n_test"
        },
        "options": {
          "queryName": "match5_documents"
        }
      },
      "id": "c1e98b50-0dfb-4128-a3e2-7038ba4dda36",
      "name": "Insert into Supabase Vectorstore1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1896,
        1470
      ],
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 0. Parse the incoming Document data\nlet raw = $input.first().json['Document data'];\nlet arr = typeof raw === 'string' ? JSON.parse(raw) : raw;\n\n// If document name exists, use it — else fallback\nlet source = $input.first().json['Document name'] || 'unknown_source';\n\n// If your workflow previously had a reference like $('Insert Document Metadata1')\n// and it caused an \"unexecuted\" error, we replace it with a safe null or fetch from input\nlet source_id = $input.first().json['source_metadata_id'] || $input.first().json['source'] || $input.first().json[' source'] || null;\n\n// Helper: return character length of an array object\nfunction getObjLength(obj) {\n  return (obj.content || '').length;\n}\n\nfunction getObjLengthofTextOnly(obj) {\n  // Ignore OCR images for character count\n  if (obj.type === 'image_ocr') return 0;\n  return (obj.content || '').length;\n}\n\n// Split any single item whose content is > chunkSize into multiple items\nfunction splitOversizedItems(arr, chunkSize) {\n  const result = [];\n  for (const item of arr) {\n    const content = item.content || '';\n    if (content.length <= chunkSize) {\n      result.push(item);\n    } else {\n      for (let start = 0; start < content.length; start += chunkSize) {\n        const part = content.slice(start, start + chunkSize);\n        result.push({ ...item, content: part });\n      }\n    }\n  }\n  return result;\n}\n\n// Chunking function\nfunction chunkByCharLength(arr, source, chunkSize = 1000) {\n  const flat = splitOversizedItems(arr, chunkSize);\n  const response = [];\n  let idx = 0;\n  let charPos = 0;\n\n  while (idx < flat.length) {\n    const a = [];\n    let sum = 0;\n    const from = charPos;\n\n    while (idx < flat.length && sum < chunkSize) {\n      const item = flat[idx];\n      const len = getObjLength(item);\n      const text_len = getObjLengthofTextOnly(item);\n      a.push(item);\n      sum += len;\n      charPos += text_len;\n      idx++;\n    }\n\n    const to = charPos;\n    const metadata = {\n      source: source,\n      source_metadata_id: source_id,\n      loc: { Characters: { from, to } }\n    };\n\n    response.push({\n      content: JSON.stringify({\n        pageContent: a,\n        metadata\n      })\n    });\n  }\n  return response;\n}\n\n// 1. Run chunking\nconst chunks = chunkByCharLength(arr, source, 1000);\n\n// 2. Return in n8n-compatible format\nreturn chunks.map(c => ({ json: c }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        1220
      ],
      "id": "68ea87da-26fa-48a0-9281-156b116b2e7d",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1000,
        1220
      ],
      "id": "6f0e76a2-ad3c-4af6-af7e-43a43076125c",
      "name": "HTTP Request1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1Q3CWs1j1TeLPSSHPBJ-AbLcOpLNi0qkh",
            "mode": "list",
            "cachedResultName": "Chat knowledge base",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1Q3CWs1j1TeLPSSHPBJ-AbLcOpLNi0qkh"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -100,
        1495
      ],
      "id": "86b87565-25a8-4e84-b78f-9b7b6f24c469",
      "name": "Google Drive2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "tableId": "dbtai_kb",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.file_title }}"
            },
            {
              "fieldId": "url",
              "fieldValue": "={{ $json.file_url }}"
            },
            {
              "fieldId": "drive_file_id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "last_modified_date",
              "fieldValue": "={{ $json.last_modified_date }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        560,
        1220
      ],
      "id": "091fc8b6-c544-4c93-b3c9-ea16073024e8",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        780,
        1220
      ],
      "id": "2f61e69e-1577-49d0-9a10-583bc7b25158",
      "name": "Google Drive3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('HTTP Request1').item.json.data[0].parseJson().source }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $('HTTP Request1').item.json.data[0].parseJson().blocks }}",
              "type": "string"
            },
            {
              "id": "1087ab34-5643-4755-b545-cf34d0ae2cd2",
              "name": " source",
              "value": "={{ $('Google Drive3').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1440,
        1220
      ],
      "id": "93f5a96f-c38c-4d17-9d22-687a60027df3",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1220,
        1220
      ],
      "id": "2a0c3fcf-c7e7-41bb-8052-186d5bed3716",
      "name": "If1"
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "d3324fa0-961c-4bca-a495-badf32aa01d2",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1880,
        1690
      ],
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1660,
        840
      ],
      "id": "b30bb6c0-4551-4737-a682-ad49b832e412",
      "name": "Edit Fields5",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2460,
        160
      ],
      "id": "403a3d45-3333-45bf-aa60-c6d024e6277f",
      "name": "Respond to Webhook1"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-10T18:45:36.416Z",
      "updatedAt": "2025-08-10T18:45:36.416Z",
      "role": "workflow:owner",
      "workflowId": "dCpuT0xi56nEX6MA",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": {
    "node:Schedule Trigger1": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-08-12T13:02:29.000Z",
  "versionId": "5ab662dd-44cc-46a2-a1b4-938fcf3dff8a"
}