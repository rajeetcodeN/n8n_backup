{
  "active": false,
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Split Binary Attachments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Binary Attachments": {
      "main": [
        [
          {
            "node": "Loop: Process Each Attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop: Process Each Attachment": {
      "main": [
        [
          {
            "node": "Switch File Type1",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Extract Timesheet Data (OpenAI)": {
      "main": [
        []
      ]
    },
    "Set Timesheet JSON Fields": {
      "main": [
        [
          {
            "node": "Get Customer Info From PO Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Customer Info From PO Sheet": {
      "main": [
        [
          {
            "node": "Search: Client Invoices Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Invoice Date & Due Date Days": {
      "main": [
        [
          {
            "node": "Generate Sheet Name (Employee + Week Start to End Dates)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Sheet Name (Employee + Week Start to End Dates)": {
      "main": [
        [
          {
            "node": "Create New Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Invoice Range": {
      "main": [
        [
          {
            "node": " If: Invoice Range is 15 Days?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: File Already Exists?": {
      "main": [
        [
          {
            "node": "Append: Final Row to Existing Sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": " Sheets: Create Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " If: Invoice Range is 15 Days?": {
      "main": [
        [
          {
            "node": "Set Invoice Date & Due Date Days",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: File Name from Start & End Based Date Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: File Name from Start & End Based Date Range": {
      "main": [
        [
          {
            "node": "Search: File By Start Date Name",
            "type": "main",
            "index": 0
          },
          {
            "node": "Search: File By End Date Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Merge: Combine Folder Search Results": {
      "main": [
        [
          {
            "node": "If: File Already Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Sheet": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Created Sheet to Final Folder": {
      "main": [
        [
          {
            "node": " Set: Row Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Set: Row Data": {
      "main": [
        [
          {
            "node": " Sheets: Append Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Sheets: Append Row": {
      "main": [
        [
          {
            "node": " Sheets: Final Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Sheets: Final Append": {
      "main": [
        [
          {
            "node": "Loop: Process Each Attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Sheets: Create Sheet": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    " Sheets: Append Row1": {
      "main": [
        [
          {
            "node": "Set: Spreadsheet  (ID & Name)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from Attachment": {
      "main": [
        [
          {
            "node": "Extract Timesheet Data (OpenAI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: Client Invoices Folder": {
      "main": [
        [
          {
            "node": "Search: Client Folder by Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: Client Folder by Name": {
      "main": [
        [
          {
            "node": "Check Client Name Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: File By Start Date Name": {
      "main": [
        [
          {
            "node": " Merge: Combine Folder Search Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: File By End Date Name": {
      "main": [
        [
          {
            "node": " Merge: Combine Folder Search Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Drive: Move Sheet To Final Folder": {
      "main": [
        [
          {
            "node": "Set: Empty Row Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Empty Row Structure": {
      "main": [
        [
          {
            "node": " Sheets: Append Row1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Spreadsheet  (ID & Name)": {
      "main": [
        [
          {
            "node": "Append: Final Row to Existing Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append: Final Row to Existing Sheet": {
      "main": [
        [
          {
            "node": "Loop: Process Each Attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Year Folder Exists": {
      "main": [
        [
          {
            "node": "Set: Invoice Range",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Current Year Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Name Folder": {
      "main": [
        [
          {
            "node": "Create Employee Name Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Client Name Folder": {
      "main": [
        [
          {
            "node": "Search: Employee Name Folder",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Client Name Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: Employee Name Folder": {
      "main": [
        [
          {
            "node": "Check Employee Name Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Employee Name Folder": {
      "main": [
        [
          {
            "node": "Search: Year Folder ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Employee Name Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Employee Name Folder": {
      "main": [
        [
          {
            "node": "Create Year Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search: Year Folder ": {
      "main": [
        [
          {
            "node": "Check if Year Folder Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Year Folder": {
      "main": [
        [
          {
            "node": "Check if Year Folder Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Current Year Folder": {
      "main": [
        [
          {
            "node": "Set: Invoice Range",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set Values Before Search Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Set Values After Search Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values Before Search Node": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values After Search Node": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "Set Values Before Search Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Invoice Range1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Move Created Sheet to Final Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Drive: Move Sheet To Final Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Spreadsheet File": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model2": {
      "ai_languageModel": [
        []
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch File Type": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Spreadsheet File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mistral file delete5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        []
      ]
    },
    "Send a message": {
      "main": [
        []
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Aggregate1": {
      "main": [
        []
      ]
    },
    "Edit Fields6": {
      "main": [
        []
      ]
    },
    "Read Spreadsheet File1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Aggregate3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch File Type1": {
      "main": [
        [
          {
            "node": "Edit Fields10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Spreadsheet File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload1": {
      "main": [
        [
          {
            "node": "Mistral Signed URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL1": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR1": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mistral file delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate3": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields10": {
      "main": [
        [
          {
            "node": "Mistral Upload1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Set Timesheet JSON Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Mistral Upload2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop: Process Each Attachment1": {
      "main": [
        [],
        []
      ]
    },
    "Read Spreadsheet File2": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Aggregate4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model1": {
      "ai_languageModel": [
        []
      ]
    },
    "Switch File Type2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Spreadsheet File2",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Edit Fields11": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields12": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload2": {
      "main": [
        [
          {
            "node": "Mistral Signed URL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL2": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR2": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mistral file delete1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate4": {
      "main": [
        [
          {
            "node": "Edit Fields11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Edit Fields12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Set Timesheet JSON Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Set Timesheet JSON Fields1": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate2": {
      "main": [
        []
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Aggregate2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-08T08:07:40.195Z",
  "id": "D16Ti8vZ7WqtF8Xy",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 26",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "=has:attachment (filename:timesheet OR subject:timesheet)",
          "readStatus": "unread"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -8480,
        608
      ],
      "id": "f197485f-aada-41ab-a835-831a9f481c93",
      "name": "Gmail Trigger"
    },
    {
      "parameters": {
        "jsCode": "const newItems = [];\n\nconst binary = items[0].binary;\n\nfor (const key in binary) {\n  newItems.push({\n    json: {},\n    binary: {\n      [key]: binary[key]\n    }\n  });\n}\n\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8112,
        608
      ],
      "id": "c6322f74-e24e-4160-945f-24249a7dc4e4",
      "name": "Split Binary Attachments"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -7936,
        608
      ],
      "id": "44387af8-7633-4798-9718-db3078011406",
      "name": "Loop: Process Each Attachment",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "=Extract the following from the timesheet text:\n\n- Employee Name  \n- Week Starting Date  \n- Week Ending Date  \n- Total Working Hours  \n- Client Name\n\nInstructions:\n\n- For Week Starting Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **first date** from it. Use the date exactly as written.  \n  - If no such phrase is found, and there is a row with weekdays like \"Monday Tuesday...\" followed by short-form dates like \"Mar-17\", \"May-5\", etc., extract the **first date** in that row.  \n  - Convert the short-form date into full format: **MM/DD/YYYY**.  \n    Example: \"Mar-17\" → \"03/17/2025\", \"May-5\" → \"05/05/2025\".  \n  - Do not return \"Mar-17\", \"May-5\", or any partial date format. Always return the full date in MM/DD/YYYY.\n\n- For Week Ending Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **second date**.  \n  - If weekday headers with short-form dates are present, extract the **last date** in that row.  \n  - Again, convert to **MM/DD/YYYY** format.  \n    Example: \"May-11\" → \"05/11/2025\".\n\n- Do not calculate, assume, or guess dates. Only convert short-form dates to MM/DD/YYYY format using the correct month and year from the timesheet.\n- Look for a label such as:\n - \"Total Hours\",  \n   - \"Total Billable Hours\", \n  - \"Total Number of Hours Worked\"  \n   - or any clearly indicated **total row or cell** at the bottom of the table.\n\n- Do not sum individual daily entries.\n- Return numbers exactly as shown (e.g., 40.00).\n\nOutput the result in this exact JSON format:\n\n{{ $json.data[0].text }}\n"
            }
          ]
        },
        "simplify": false,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -5184,
        1376
      ],
      "id": "527d7cb2-ffc4-48f6-9e3a-2ee15f7b3467",
      "name": "Extract Timesheet Data (OpenAI)",
      "alwaysOutputData": true,
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12c3738c-4b46-44fe-a482-efeb1beda924",
              "name": "=Employee Name",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"])[\"Employee Name\"].replace(/[\\n\\r]/g, '').trim() }}\n\n\n",
              "type": "string"
            },
            {
              "id": "b6bdd6c3-f57d-4695-9863-68e37b3bf10b",
              "name": "=Total Billable hours",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"])[\"Total Working Hours\"].replace(/[\\n\\r]/g, '').trim() }}\n\n",
              "type": "string"
            },
            {
              "id": "f826dc43-34ca-47bf-a823-9e21c0a46df8",
              "name": "Week Start Date",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"])[\"Week Starting Date\"].replace(/[\\n\\r]/g, '').replaceAll('/', '-') .trim() }}\n",
              "type": "string"
            },
            {
              "id": "faf34b88-5e61-4c15-97b6-7c933d69c279",
              "name": "Week End Date",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"])[\"Week Ending Date\"].replaceAll('/', '-').trim().replace(/[\\n\\r]/g, '')}}\n",
              "type": "string"
            },
            {
              "id": "95dd93b1-8e25-422f-b6fb-73bf65aa792e",
              "name": "Client Name",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"].replaceAll('\\n', '').replaceAll('\\r', ''))[\"Client Name\"].trim() }}\n",
              "type": "string"
            },
            {
              "id": "8c92f891-1393-4199-b9ba-3683750455f1",
              "name": "Current Year",
              "value": "={{ JSON.parse($json[\"choices\"][0][\"message\"][\"content\"])[\"Week Starting Date\"].split('/')[2] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5792,
        656
      ],
      "id": "8d84ba17-41b2-4106-b86c-5e723ac07f48",
      "name": "Set Timesheet JSON Fields"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1-mW6J9DkXMUWv9TKOQa6f8rPJIs98FJ2u4LhWDP8QpU",
          "mode": "list",
          "cachedResultName": "Customer POs",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-mW6J9DkXMUWv9TKOQa6f8rPJIs98FJ2u4LhWDP8QpU/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Email",
              "lookupValue": "={{ $('Gmail Trigger').item.json.from.value[0].address }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -5568,
        656
      ],
      "id": "d2585945-3b0b-41aa-acf0-6d7a2817af1b",
      "name": "Get Customer Info From PO Sheet",
      "executeOnce": false,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c3ddd851-ac75-4900-b55e-95cc463788b5",
              "name": "Invoice Date",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Week End Date'].trim() }}\n",
              "type": "string"
            },
            {
              "id": "0e628019-2892-4b62-8635-4aa3f476a5bb",
              "name": "Due Date",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Week End Date'].toDateTime().plus($('Get Customer Info From PO Sheet').item.json[\"Due Date Calculation\"], 'days').format('MM-dd-yyyy').trim()}}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2528,
        864
      ],
      "id": "00d8b408-cb10-40f1-99f1-49bada78f4e9",
      "name": "Set Invoice Date & Due Date Days"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a628947e-a7e6-489d-978f-d7662dcb3e64",
              "name": "Sheet Name ",
              "value": "={{ \n  $('Set Timesheet JSON Fields').item.json['Employee Name'].trim().replace(/\\s+/g, '') + '_' +\n  $('Set Timesheet JSON Fields').item.json['Week Start Date'].trim() +\n  '_to_' +\n  $('Set Timesheet JSON Fields').item.json['Week End Date'].trim()\n}}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2304,
        864
      ],
      "id": "5c817155-6923-40cc-968e-6733e5d613da",
      "name": "Generate Sheet Name (Employee + Week Start to End Dates)"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "798b8ca0-6192-47b5-b1c8-b716d7667f8c",
              "name": " Invoice range for debug",
              "value": "={{ $('Get Customer Info From PO Sheet').item.json['Invoice range'] }}",
              "type": "string"
            },
            {
              "id": "f04c0bd7-b5f7-4a86-84b9-164eebf887a2",
              "name": "Year Folder id",
              "value": "={{ $json.id ||$('Create Current Year Folder').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3600,
        560
      ],
      "id": "4aea62f1-6e1a-40d1-8d37-d89155a5429f",
      "name": "Set: Invoice Range"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "768e3b62-b460-4845-abce-3e2058826a7a",
              "leftValue": "={{ $json.id}}",
              "rightValue": "={{ $('Set: File Name from Start & End Based Date Range').item.json['Sheet Name 1'] }}",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1312,
        432
      ],
      "id": "ceb57f1b-6301-4f42-83fe-82e846128f35",
      "name": "If: File Already Exists?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d064b0bc-6c78-4f05-a8e4-4e6a6be858e5",
              "leftValue": "={{ $('Set: Invoice Range1').item.json[' Invoice range for debug'] }}",
              "rightValue": "=15 days",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3232,
        560
      ],
      "id": "e5ce48c6-e23b-4eca-bbd1-fde1dd04fbb7",
      "name": " If: Invoice Range is 15 Days?",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a628947e-a7e6-489d-978f-d7662dcb3e64",
              "name": "File Name (Start Date Based)",
              "value": "={{\n  (() => {\n    const emp = $('Set Timesheet JSON Fields').item.json['Employee Name']?.replace(/\\s+/g, '') ?? 'Unknown';\n    const raw = $('Set Timesheet JSON Fields').item.json['Week Start Date']?.trim();\n    const [mm, dd, yyyy] = raw.split('-');\n    const startDate = new Date(`${yyyy}-${mm}-${dd}T12:00:00`);\n    const endDate = new Date(startDate.getTime() + 13 * 86400000);\n\n    const pad = n => n.toString().padStart(2, '0');\n    const format = d => `${pad(d.getMonth()+1)}-${pad(d.getDate())}-${d.getFullYear()}`;\n\n    return `${emp}_${format(startDate)}_to_${format(endDate)}`;\n  })()\n}}\n",
              "type": "string"
            },
            {
              "id": "d60af835-8f88-4fa5-9132-36e9052c52c7",
              "name": "File Name (End Date Based)",
              "value": "={{\n  (() => {\n    const emp = $('Set Timesheet JSON Fields').item.json['Employee Name']?.replace(/\\s+/g, '') ?? 'Unknown';\n    const raw = $('Set Timesheet JSON Fields').item.json['Week End Date']?.trim();\n    const [mm, dd, yyyy] = raw.split('-');\n    const endDate = new Date(`${yyyy}-${mm}-${dd}T12:00:00`);\n    const startDate = new Date(endDate.getTime() - 13 * 86400000);\n\n    const pad = n => n.toString().padStart(2, '0');\n    const format = d => `${pad(d.getMonth()+1)}-${pad(d.getDate())}-${d.getFullYear()}`;\n\n    return `${emp}_${format(startDate)}_to_${format(endDate)}`;\n  })()\n}}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2528,
        336
      ],
      "id": "aa9ce59b-45ca-4943-bbc7-39cfce48aa4a",
      "name": "Set: File Name from Start & End Based Date Range"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -1568,
        432
      ],
      "id": "c1a3af5b-a4d4-477e-b89d-62ba1db835c3",
      "name": " Merge: Combine Folder Search Results",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "={{ $json[\"Sheet Name \"] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -2112,
        864
      ],
      "id": "a3e704e4-370c-4914-ae55-1679772e440e",
      "name": "Create New Sheet",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Create New Sheet').item.json.spreadsheetId }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Set: Invoice Range').item.json['Year Folder id']||  $('Create Current Year Folder').item.json.id }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1600,
        880
      ],
      "id": "41855ab9-63ac-415a-96ad-e2db25d2fab6",
      "name": "Move Created Sheet to Final Folder"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"Customer Account Number\": \"\",\n   \"Invoice Date\": \"\",\n  \"Due Date\": \"\",\n   \"PO Number\": \"\",\n  \"Item Column Title\":\"\",\n  \"Quantity Column\":\"\",\n  \"Item Name\":\"\",\n  \"Quantity\" :\"\",\n  \"Unit Price\":\"\",\n  \"Decription\" :\"\"\n  \n  }\n",
        "options": {
          "dotNotation": false
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1392,
        896
      ],
      "id": "235ba387-3bd6-4bb0-a6c7-2e7de467b5ad",
      "name": " Set: Row Data",
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create New Sheet').item.json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Create New Sheet').item.json.sheets[0].properties.sheetId }}",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Customer Account Number",
              "displayName": "Customer Account Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Invoice Date",
              "displayName": "Invoice Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Due Date",
              "displayName": "Due Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PO Number",
              "displayName": "PO Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Column Title",
              "displayName": "Item Column Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity Column",
              "displayName": "Quantity Column",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Name",
              "displayName": "Item Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Unit Price",
              "displayName": "Unit Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Decription",
              "displayName": "Decription",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1120,
        864
      ],
      "id": "4560c52c-c32e-4b72-9d58-621b5f149bde",
      "name": " Sheets: Append Row",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $('Create New Sheet').item.json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Create New Sheet').item.json.sheets[0].properties.sheetId }}",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Customer Account Number": "={{ $('Get Customer Info From PO Sheet').item.json['Customer Account Number'] }}",
            "Invoice Date": "={{ $('Set Invoice Date & Due Date Days').item.json['Invoice Date'] }}",
            "Due Date": "={{ $('Set Invoice Date & Due Date Days').item.json['Due Date'] }}",
            "PO Number": "={{ $('Get Customer Info From PO Sheet').item.json['PO Number'] }}",
            "Item Column Title": "Items",
            "Quantity Column": "Hours",
            "Item Name": "={{ $('Get Customer Info From PO Sheet').item.json.Item }}",
            "Quantity": "={{ $('Set Timesheet JSON Fields').item.json['Total Billable hours'] }}",
            "Decription": "=Week Period from {{ $('Set Timesheet JSON Fields').item.json['Week Start Date'] }} to {{ $('Set Timesheet JSON Fields').item.json['Week End Date'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Customer Account Number",
              "displayName": "Customer Account Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Invoice Date",
              "displayName": "Invoice Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Due Date",
              "displayName": "Due Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PO Number",
              "displayName": "PO Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Item Column Title",
              "displayName": "Item Column Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity Column",
              "displayName": "Quantity Column",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Item Name",
              "displayName": "Item Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Unit Price",
              "displayName": "Unit Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Decription",
              "displayName": "Decription",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -800,
        1040
      ],
      "id": "15c5dc6f-0805-4957-bf6a-e1c8210d1867",
      "name": " Sheets: Final Append"
    },
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "={{ $('Set: File Name from Start & End Based Date Range').item.json['File Name (Start Date Based)'] }}",
        "sheetsUi": {
          "sheetValues": [
            {
              "title": "=Sheet1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1152,
        544
      ],
      "id": "e4698761-5133-4db9-9d4f-c5684de4c229",
      "name": " Sheets: Create Sheet",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $(' Sheets: Create Sheet').item.json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $(' Sheets: Create Sheet').item.json.sheets[0].properties.sheetId }}",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Customer Account Number",
              "displayName": "Customer Account Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Invoice Date",
              "displayName": "Invoice Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Due Date",
              "displayName": "Due Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PO Number",
              "displayName": "PO Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Column Title",
              "displayName": "Item Column Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity Column",
              "displayName": "Quantity Column",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Name",
              "displayName": "Item Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Unit Price",
              "displayName": "Unit Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Decription",
              "displayName": "Decription",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -384,
        544
      ],
      "id": "e827ed68-428c-434c-9334-db4c522efc78",
      "name": " Sheets: Append Row1",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "text"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "={{ Object.keys($binary)[0] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5344,
        1376
      ],
      "id": "c0f6adfb-dbec-497f-96ba-619461c9e768",
      "name": "Extract Text from Attachment"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "01-ClientInvoices",
        "returnAll": true,
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -5360,
        656
      ],
      "id": "b8105f0b-97aa-498f-a19f-c2460e1b68c3",
      "name": "Search: Client Invoices Folder",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Set Timesheet JSON Fields').item.json['Client Name'] }}",
        "returnAll": true,
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -5152,
        656
      ],
      "id": "d22deb28-d92f-4741-82fa-5b199b83cb17",
      "name": "Search: Client Folder by Name",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $json['File Name (Start Date Based)'] }}",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2112,
        176
      ],
      "id": "6f0a4ddd-f3d2-4696-a12e-49b2a74c7c35",
      "name": "Search: File By Start Date Name",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $json['File Name (End Date Based)'] }}",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2064,
        576
      ],
      "id": "4a766186-1af1-4b44-8cc1-5a59385768bc",
      "name": "Search: File By End Date Name",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.spreadsheetId }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Set: Invoice Range').item.json['Year Folder id']||  $('Create Current Year Folder').item.json.id }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -784,
        544
      ],
      "id": "819e4173-34a7-4d96-9850-1c7168abced5",
      "name": "Drive: Move Sheet To Final Folder"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"Customer Account Number\": \"\",\n   \"Invoice Date\": \"\",\n  \"Due Date\": \"\",\n   \"PO Number\": \"\",\n  \"Item Column Title\":\"\",\n  \"Quantity Column\":\"\",\n  \"Item Name\":\"\",\n  \"Quantity\" :\"\",\n  \"Unit Price\":\"\",\n  \"Decription\" :\"\"\n  \n  }\n",
        "options": {
          "dotNotation": false
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -608,
        544
      ],
      "id": "f09f54be-dc85-441a-a1e8-9067226ef46b",
      "name": "Set: Empty Row Structure",
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "89af4fa2-04e9-4e86-90cd-805437cb96c4",
              "name": "id",
              "value": "={{ $(' Sheets: Create Sheet').item.json.spreadsheetId }}",
              "type": "string"
            },
            {
              "id": "6625391b-df04-4775-976d-baeb91ff083c",
              "name": "name",
              "value": "={{ $(' Sheets: Create Sheet').item.json.properties.title }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -160,
        544
      ],
      "id": "c3361ced-a961-429d-aa1a-f5b2875c97d5",
      "name": "Set: Spreadsheet  (ID & Name)"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Sheet1",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Customer Account Number": "={{ $('Get Customer Info From PO Sheet').item.json['Customer Account Number'] }}",
            "Invoice Date": "={{ $json.name.split(\"_to_\")[1] }}",
            "PO Number": "={{ $('Get Customer Info From PO Sheet').item.json['PO Number'] }}",
            "Item Column Title": "Items",
            "Quantity Column": "Hours",
            "Item Name": "={{ $('Get Customer Info From PO Sheet').item.json.Item }}",
            "Quantity": "={{ $('Set Timesheet JSON Fields').item.json['Total Billable hours'] }}",
            "Decription": "=Week ending  {{ $('Set Timesheet JSON Fields').item.json['Week End Date'] }}",
            "Due Date": "={{ $json.name.split(\"_to_\")[1].trim().toDateTime('MM-dd-yyyy').plus($('Get Customer Info From PO Sheet').item.json['Due Date Calculation'],'days').format('MM-dd-yyyy') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Customer Account Number",
              "displayName": "Customer Account Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Invoice Date",
              "displayName": "Invoice Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Due Date",
              "displayName": "Due Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PO Number",
              "displayName": "PO Number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Column Title",
              "displayName": "Item Column Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity Column",
              "displayName": "Quantity Column",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Item Name",
              "displayName": "Item Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Unit Price",
              "displayName": "Unit Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Decription",
              "displayName": "Decription",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        64,
        -128
      ],
      "id": "67d8f1f5-b155-468f-b906-490da2a6dd61",
      "name": "Append: Final Row to Existing Sheet"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "daebe4a7-edcf-4902-a5d7-6c6b4ad995c8",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3984,
        576
      ],
      "id": "82a9d231-0fcb-4617-90db-d2ea2cf9cb04",
      "name": "Check if Year Folder Exists"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Set Timesheet JSON Fields').item.json['Client Name'] }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Search: Client Invoices Folder').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4704,
        816
      ],
      "id": "33e54f5e-2ca7-4d89-aec9-6c69037a43ac",
      "name": "Create Client Name Folder"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e4d2d3f6-4fff-473b-9dd6-27bb19e8ce67",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4928,
        656
      ],
      "id": "935d181b-c7ca-46a5-a0f2-151bb857fffe",
      "name": "Check Client Name Folder"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Get Customer Info From PO Sheet').item.json['Folder Name'] }}",
        "returnAll": true,
        "filter": {
          "driveId": {
            "mode": "list",
            "value": "My Drive"
          },
          "folderId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4720,
        464
      ],
      "id": "7eaf0c1b-c4b6-4bad-8839-41e76ffd7c0b",
      "name": "Search: Employee Name Folder",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2582c0dd-ec40-421a-8246-e5ecb32c9d0f",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4528,
        464
      ],
      "id": "5000f058-d954-4b74-af55-86beb9bc37e4",
      "name": "Check Employee Name Folder"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Get Customer Info From PO Sheet').item.json['Folder Name'] }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Check Client Name Folder').item.json.id || $('Create Client Name Folder').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4400,
        816
      ],
      "id": "8884ec14-1a04-41fa-b4a1-f2ed1d075de5",
      "name": "Create Employee Name Folder"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "={{ $('Set Timesheet JSON Fields').item.json['Current Year'] }}",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "={{ $json.id }}",
            "mode": "id"
          },
          "whatToSearch": "folders"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4224,
        432
      ],
      "id": "0a6f360f-7edc-4f2b-b824-f8a9f5014f77",
      "name": "Search: Year Folder ",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Set Timesheet JSON Fields').item.json['Current Year'] }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4160,
        816
      ],
      "id": "a676bd83-3d87-4308-a7e6-507a8c66da15",
      "name": "Create Year Folder"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $('Set Timesheet JSON Fields').item.json['Current Year'] }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $('Search: Employee Name Folder').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3808,
        816
      ],
      "id": "c85ad61f-142c-465b-bd10-3123b5f779d9",
      "name": "Create Current Year Folder"
    },
    {
      "parameters": {
        "jsCode": "const path = $json.folderPath;\nconst folders = path.split(\"/\");\nreturn [\n  {\n    json: {\n      folders,\n      currentIndex: 0,\n      parentFolderId: \"root\",\n      folderCount: folders.length\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4992,
        1696
      ],
      "id": "eb742a9f-0673-4560-884e-2c9ecb8d46aa",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "queryString": "=name = \"{{ $json.folders[$json.currentIndex] }}\" and mimeType = \"application/vnd.google-apps.folder\" and \"{{ $json.parentFolderId }}\" in parents",
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -4448,
        1696
      ],
      "id": "063f552d-5fbb-4c63-811d-39ca972e5be2",
      "name": "Google Drive",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nconst parentFolderId = input.parentFolderId || \"root\";\nconst currentIndex = input.currentIndex || 0;\n\n// Return combined object\nreturn [\n  {\n    json: {\n      parentFolderId: parentFolderId, // carry forward this ID\n      folders: $('Code').first().json.folders,\n      currentIndex:  currentIndex\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4720,
        1696
      ],
      "id": "8f25c845-48e5-4d4b-a19e-57f4bce46596",
      "name": "Set Values Before Search Node"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all(); // get all input items as an array\nconst folderId = $input.first().json.id;\n\nconst previous = items.find(item => item.json.currentIndex !== undefined);\n\nconst folders = previous?.json.folders || [];\nconst currentIndex = $('Set Values Before Search Node').first().json.currentIndex;\n\n// Return combined object\nreturn [\n  {\n    json: {\n      parentFolderId: folderId, // carry forward this ID\n      folders: $('Code').first().json.folders,\n      currentIndex:  currentIndex  + 1\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4192,
        1696
      ],
      "id": "d706accc-cada-48da-9e89-8e914a4cebd5",
      "name": "Set Values After Search Node"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"folderPath\": \"{{ '01-ClientInvoices/' +$json['client name'].trim() + '/' + $json['Folder  name'].trim() + '/' + $json['current year']}}\",\n  \"fileName\": \"Report.xlsx\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5168,
        1696
      ],
      "id": "3729fe38-fa43-4716-ac91-dd5d8ea60ea3",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "e3e92ffc-9c40-4535-a50a-b1ab11b9375f",
              "leftValue": "={{ $json[\"currentIndex\"] }}",
              "rightValue": "={{ $('Code').item.json.folderCount }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3952,
        1696
      ],
      "id": "f87ad259-f2dd-46a8-a876-fdf2a838929d",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "df7f31a0-6fdc-4751-a84d-c66d361d739c",
              "name": "Folder  name",
              "value": "={{ $('Get Customer Info From PO Sheet').item.json['Folder Name'] }}",
              "type": "string"
            },
            {
              "id": "16f9bd30-97cc-4f84-8b28-914c3651b79c",
              "name": "client name",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Client Name'] }}",
              "type": "string"
            },
            {
              "id": "f5fef15c-f931-4e97-9149-0e9f0b25df60",
              "name": "current year",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Current Year'] }}",
              "type": "string"
            },
            {
              "id": "50bdfd62-d2ad-428d-b867-0f2c1a484ed4",
              "name": "Employee Name",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Employee Name'] }}",
              "type": "string"
            },
            {
              "id": "d2849d67-59ca-4bbd-ae2e-8f6e102983b4",
              "name": "Week Start Date",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Week Start Date'] }}",
              "type": "string"
            },
            {
              "id": "b1294e06-21b8-4a45-84b6-f6d14fca1557",
              "name": "Week End Date",
              "value": "={{ $('Set Timesheet JSON Fields').item.json['Week End Date'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5328,
        1696
      ],
      "id": "8068c414-6215-4e02-bcae-95e70c4e4ac8",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "798b8ca0-6192-47b5-b1c8-b716d7667f8c",
              "name": " Invoice range for debug",
              "value": "={{ $('Get Customer Info From PO Sheet').item.json['Invoice range'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5488,
        1696
      ],
      "id": "f0d88685-694e-4682-b99e-e1d6e5620105",
      "name": "Set: Invoice Range1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://sheets.googleapis.com/v4/spreadsheets/{{$json.spreadsheetId}}:batchUpdate\n",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"requests\": [\n    {\n      \"updateSpreadsheetProperties\": {\n        \"properties\": {\n          \"timeZone\": \"America/New_York\"\n        },\n        \"fields\": \"timeZone\"\n      }\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1872,
        880
      ],
      "id": "63fe929c-b447-4d38-8ffa-e4d56cb87abc",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://sheets.googleapis.com/v4/spreadsheets/{{$json.spreadsheetId}}:batchUpdate\n",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"requests\": [\n    {\n      \"updateSpreadsheetProperties\": {\n        \"properties\": {\n          \"timeZone\": \"America/New_York\"\n        },\n        \"fields\": \"timeZone\"\n      }\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1008,
        544
      ],
      "id": "814a0eed-b043-43dc-a131-a4edbb6b9269",
      "name": "HTTP Request1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -10256,
        2192
      ],
      "id": "8ccb0b0d-9145-4318-9c5f-23fbf30185f4",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -9760,
        2192
      ],
      "id": "dfc94d11-6e9a-456c-af18-e1295e8fbe3f",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "options": {
          "headerRow": true
        }
      },
      "id": "f4e548e2-30fb-4cd0-9061-7a7747d7431d",
      "name": "Read Spreadsheet File",
      "type": "n8n-nodes-base.spreadsheetFile",
      "position": [
        -8768,
        2224
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Convert Excel serial date -> YYYY-MM-DD\nconst base = new Date(Date.UTC(1899, 11, 30));\nfunction fromSerial(s) {\n  if (!s || isNaN(Number(s))) return s; // skip if not a number\n  const ms = Number(s) * 86400 * 1000;\n  return new Date(base.getTime() + ms).toISOString().slice(0, 10);\n}\n\nreturn items.map(item => {\n  let row = { ...item.json };\n\n  // Convert possible date fields\n  if (row.__EMPTY && !isNaN(row.__EMPTY)) {\n    row.__EMPTY = fromSerial(row.__EMPTY);\n  }\n  if (row.__EMPTY_1 && !isNaN(row.__EMPTY_1) && row[\" Contractor Timesheet\"]?.includes(\"Weekending\")) {\n    row.__EMPTY_1 = fromSerial(row.__EMPTY_1);\n  }\n\n  return { json: row };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8528,
        2224
      ],
      "id": "a7007ebd-2c9f-4af4-8e56-80cdae1dedf7",
      "name": "Code5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You must respond ONLY with valid raw rendered JSON.\n- Do NOT include the word \"json\".\n- Do NOT include the word \"```json\".\n- Do NOT use triple backticks or markdown formatting.\n- Do NOT wrap the response in any key like \"output\".\n- Do NOT write anything starting at output directly start with valid root-level JSON.\n- Only respond with a valid, root-level JSON object.\n- Do NOT skip any line item. \n\n\n{{ $json.content }}\n",
        "options": {
          "systemMessage": "=Your sole function is to be a meticulous data extraction AI. Your task is to analyze the provided timesheet documents (images, PDFs, etc.) and convert the information into a structured JSON format with absolute precision, following the rules below.  \n\nFor each timesheet, first extract all summary-level information into the `document_info` object. This includes:  \n\n- Employee Name  \n- Week Starting Date  \n- Week Ending Date  \n- Total Working Hours  \n- Client Name  \n\n### Rules\n\n\nInstructions:\n\n- For Week Starting Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **first date** from it. Use the date exactly as written.  \n  - If no such phrase is found, and there is a row with weekdays like \"Monday Tuesday...\" followed by short-form dates like \"Mar-17\", \"May-5\", etc., extract the **first date** in that row.  \n  - Convert the short-form date into full format: **MM/DD/YYYY**.  \n    Example: \"Mar-17\" → \"03/17/2025\", \"May-5\" → \"05/05/2025\".  \n  - Do not return \"Mar-17\", \"May-5\", or any partial date format. Always return the full date in MM/DD/YYYY.\n\n- For Week Ending Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **second date**.  \n  - If weekday headers with short-form dates are present, extract the **last date** in that row.  \n  - Again, convert to **MM/DD/YYYY** format.  \n    Example: \"May-11\" → \"05/11/2025\".\n\n- Do not calculate, assume, or guess dates. Only convert short-form dates to MM/DD/YYYY format using the correct month and year from the timesheet.\n- Look for a label such as:\n - \"Total Hours\",  \n   - \"Total Billable Hours\", \n  - \"Total Number of Hours Worked\"  \n   - or any clearly indicated **total row or cell** at the bottom of the table.\n\n- Do not sum individual daily entries.\n- Return numbers exactly as shown (e.g., 40.00).\n\n---\n\n### Output Format  \n\n# You must respond ONLY with valid raw rendered JSON.  \n\n- Do NOT include the word `\"json\"`.  \n- Do NOT include ```json.  \n- Do NOT use triple backticks or markdown formatting.  \n- Do NOT wrap the response in any key like `\"output\"`.  \n- Do NOT write anything before the opening `[` of the JSON array.  \n- Only respond with a valid, root-level JSON array.  \nNo \"output\" wrapper.\nNo backticks.\nNo \"json\" label.\n---\n\n\n\n\n### Final JSON Schema  \n\n[\n  {\n    \"document_info\": {\n      \"employee_name\": null,\n      \"week_start_date\": null,\n      \"week_end_date\": null,\n      \"total_hours\": null,\n      \"client_name\": null\n    }\n  }\n]\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -7744,
        2240
      ],
      "id": "ea0442eb-2a3c-4ef4-99b9-aef579de671f",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": "mistral-medium-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -7920,
        2496
      ],
      "id": "fc8c1b8d-0ebe-44ed-a050-3896d5e6c3d5",
      "name": "Mistral Cloud Chat Model2",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID1').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "a6bf5bb1-6b00-49de-808b-fc66c19d6eb9",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -8432,
        4272
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "19c21b84-8f7e-4cad-9e40-8253c5b3339b",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9536,
        2208
      ]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1hlxhNjbmROD5mTs2KSTZV_91lBOWtIYi",
            "mode": "list",
            "cachedResultName": "Testprompt",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1hlxhNjbmROD5mTs2KSTZV_91lBOWtIYi"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -10032,
        2192
      ],
      "id": "e36b10c1-83e8-47df-897e-df10dd3f5c13",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "pdf/doc"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/png",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/tiff",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/gif",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/bmp",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "0337898e-cbca-45c6-9998-9297e2696aa6",
      "name": "Switch File Type",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -9088,
        2192
      ]
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "rajeet9653@gmail.com",
        "subject": "timesheet approval required",
        "message": "=check if give file data match the extracted data\n\n\n {{ $json.email_body }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "original file ",
              "placeholder": "={{ $('Download File').item.json.file_url }}"
            },
            {
              "fieldLabel": "is output accurate ",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "yes"
                  },
                  {
                    "option": "no"
                  }
                ]
              }
            },
            {
              "fieldLabel": "comments for correction"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -6192,
        2656
      ],
      "id": "ee83fb4f-dfb7-4fa0-9fd4-5a6de2895c95",
      "name": "Send a message",
      "webhookId": "a53f176d-af13-41b2-9746-51b0136c45f2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "530eae36-2bc2-4f6f-8755-73b44da913e4",
              "name": "content",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -8160,
        2224
      ],
      "id": "e7fd7e4f-9e58-47b2-a7d0-46b242d02fd8",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ JSON.parse($json[\"data\"][0]).blocks[0].content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -8224,
        2480
      ],
      "id": "3bc1d6dd-a038-46cc-8035-fd6446dcf15d",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "08a66fd0-7f3f-4e5f-9d23-60b6736535e8",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -8640,
        2048
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "b1cdbc52-d5f1-41d5-8892-274a9b8375d8",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -8416,
        2048
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "id": "05468db1-27aa-472c-a681-c292222c0af6",
      "name": "Mistral DOC OCR",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -8192,
        2048
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ $json.pages[0].markdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7968,
        2048
      ],
      "id": "f9f2027c-09d6-4cf4-b5b1-bb2c6ed06688",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8320,
        2224
      ],
      "id": "8ae4cadc-b339-4658-ad95-5bea715ded0d",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// input[0].json contains your JSON\nconst outputString = $json[\"output\"];\n\n// Parse the string\nconst parsedJSON = JSON.parse(outputString);\n\n// Return as n8n items\nreturn parsedJSON.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7408,
        2256
      ],
      "id": "06dcfef3-b875-44a0-acd1-7629649d3f1c",
      "name": "Code8"
    },
    {
      "parameters": {
        "jsCode": "const data = $items()[0].json;\n\nlet html = `\n<h2>Timesheet Verification</h2>\n<p>Contractor: ${data.document_info.contractor_name}<br>\nClient: ${data.document_info.client_name}<br>\nManager: ${data.document_info.manager_name}<br>\nEnd Date: ${data.document_info.end_date}<br>\nTotal Hours: ${data.document_info.total_hours}</p>\n\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n<tr>\n<th>Day</th>\n<th>Date</th>\n<th>Hours</th>\n<th>Description</th>\n</tr>\n`;\n\ndata.time_entries.forEach(entry => {\n  // Safely handle null or empty description\n  const desc = entry.description ? entry.description.replace(/\\n/g, '<br>') : '';\n  \n  html += `\n<tr>\n<td>${entry.day_of_week}</td>\n<td>${entry.date}</td>\n<td>${entry.hours_worked}</td>\n<td>${desc}</td>\n</tr>`;\n});\n\nhtml += `</table>`;\n\nreturn [{ json: { email_body: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7008,
        2752
      ],
      "id": "21c1a976-294e-4449-ad09-fcfe5b646ccf",
      "name": "Code9"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "8d70b29b-540d-4c8b-b701-6a7fa1ce8f68",
      "name": "Mistral file delete5",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7984,
        1840
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8816,
        2496
      ],
      "id": "e054381f-ff18-4436-9e85-b084518a908f",
      "name": "HTTP Request2",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e5bd95ba-8269-404a-bf9d-fa0d25398b59",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -8864,
        2048
      ],
      "id": "6c9a2cb8-1ee0-4098-9324-0f21cd6a87c1",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -5776,
        2752
      ],
      "id": "d16d966c-42e7-480e-9226-69105b85723e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "data[0].document_info.week_end_date"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        -6128,
        2560
      ],
      "id": "c0be6328-8d48-4608-b097-f3f71837c1cc",
      "name": "Sort"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "all_documents",
        "options": {
          "includeBinaries": false
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -6576,
        1984
      ],
      "id": "42b97659-92e2-49b3-9463-69b7213d4f77",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {
          "includeBinaries": false
        }
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -5984,
        4048
      ],
      "id": "4a14e7fc-4bc7-493a-94cd-9dccda0339cb",
      "name": "Aggregate2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7f3479f9-a955-4805-a7dd-6817e7a1b212",
              "name": "data",
              "value": "={{ $json.document_info }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6176,
        2256
      ],
      "id": "b0b0085e-2b8e-4adb-b6c6-e0fb44a7994e",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "mode": "combine",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -6288,
        2288
      ],
      "id": "b0dc12a8-f675-4a25-bc7f-bfb29e1ba020",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "function parseDate(str) {\n  if (!str) return null;\n  const [mm, dd, yyyy] = str.split(\"/\").map(Number);\n  return new Date(yyyy, mm - 1, dd);\n}\n\nlet items = $items();\n\nitems = items.sort((a, b) => {\n  const da = parseDate(a.json.document_info.week_start_date) \n          || parseDate(a.json.document_info.week_end_date);\n  const db = parseDate(b.json.document_info.week_start_date) \n          || parseDate(b.json.document_info.week_end_date);\n  return da - db; // ascending\n});\n\n// Important: re-emit as new items\nreturn items.map(i => ({ json: i.json }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6848,
        2224
      ],
      "id": "5b19c265-f2a6-42d4-8b74-5dbd6d46e8bd",
      "name": "Code1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -6480,
        1936
      ],
      "id": "844f36ed-bf92-487d-95df-f5da742bbaf9",
      "name": "Wait",
      "webhookId": "13c1a3b7-5bbd-49c1-b021-7b0f40d1ff7c"
    },
    {
      "parameters": {
        "options": {
          "headerRow": true
        }
      },
      "id": "83f5528e-4922-4dc6-bfce-01cb17e0d591",
      "name": "Read Spreadsheet File1",
      "type": "n8n-nodes-base.spreadsheetFile",
      "position": [
        -7360,
        608
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Convert Excel serial date -> YYYY-MM-DD\nconst base = new Date(Date.UTC(1899, 11, 30));\nfunction fromSerial(s) {\n  if (!s || isNaN(Number(s))) return s; // skip if not a number\n  const ms = Number(s) * 86400 * 1000;\n  return new Date(base.getTime() + ms).toISOString().slice(0, 10);\n}\n\nreturn items.map(item => {\n  let row = { ...item.json };\n\n  // Convert possible date fields\n  if (row.__EMPTY && !isNaN(row.__EMPTY)) {\n    row.__EMPTY = fromSerial(row.__EMPTY);\n  }\n  if (row.__EMPTY_1 && !isNaN(row.__EMPTY_1) && row[\" Contractor Timesheet\"]?.includes(\"Weekending\")) {\n    row.__EMPTY_1 = fromSerial(row.__EMPTY_1);\n  }\n\n  return { json: row };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7120,
        608
      ],
      "id": "6232afce-3c0e-4eb8-9fe7-2b9625fb899c",
      "name": "Code6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You must respond ONLY with valid raw rendered JSON.\n- Do NOT include the word \"json\".\n- Do NOT include the word \"```json\".\n- Do NOT use triple backticks or markdown formatting.\n- Do NOT wrap the response in any key like \"output\".\n- Do NOT write anything starting at output directly start with valid root-level JSON.\n- Only respond with a valid, root-level JSON object.\n- Do NOT skip any line item. \n\n\n{{ $json.content }}\n",
        "options": {
          "systemMessage": "=Your sole function is to be a meticulous data extraction AI. Your task is to analyze the provided timesheet documents (images, PDFs, etc.) and convert the information into a structured JSON format with absolute precision, following the rules below.  \n\nFor each timesheet, first extract all summary-level information into the `document_info` object. This includes:  \n\n- Employee Name  \n- Week Starting Date  \n- Week Ending Date  \n- Total Working Hours  \n- Client Name  \n\n### Rules\n\n\nInstructions:\n\n- For Week Starting Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **first date** from it. Use the date exactly as written.  \n  - If no such phrase is found, and there is a row with weekdays like \"Monday Tuesday...\" followed by short-form dates like \"Mar-17\", \"May-5\", etc., extract the **first date** in that row.  \n  - Convert the short-form date into full format: **MM/DD/YYYY**.  \n    Example: \"Mar-17\" → \"03/17/2025\", \"May-5\" → \"05/05/2025\".  \n  - Do not return \"Mar-17\", \"May-5\", or any partial date format. Always return the full date in MM/DD/YYYY.\n\n- For Week Ending Date:  \n  - If a phrase like \"Period from ... to ...\" is present, extract the **second date**.  \n  - If weekday headers with short-form dates are present, extract the **last date** in that row.  \n  - Again, convert to **MM/DD/YYYY** format.  \n    Example: \"May-11\" → \"05/11/2025\".\n\n- Do not calculate, assume, or guess dates. Only convert short-form dates to MM/DD/YYYY format using the correct month and year from the timesheet.\n- Look for a label such as:\n - \"Total Hours\",  \n   - \"Total Billable Hours\", \n  - \"Total Number of Hours Worked\"  \n   - or any clearly indicated **total row or cell** at the bottom of the table.\n\n- Do not sum individual daily entries.\n- Return numbers exactly as shown (e.g., 40.00).\n\n---\n\n### Output Format  \n\n# You must respond ONLY with valid raw rendered JSON.  \n\n- Do NOT include the word `\"json\"`.  \n- Do NOT include ```json.  \n- Do NOT use triple backticks or markdown formatting.  \n- Do NOT wrap the response in any key like `\"output\"`.  \n- Do NOT write anything before the opening `[` of the JSON array.  \n- Only respond with a valid, root-level JSON array.  \nNo \"output\" wrapper.\nNo backticks.\nNo \"json\" label.\n---\n\n\n\n\n### Final JSON Schema  \n\n[\n  {\n    \"document_info\": {\n      \"employee_name\": null,\n      \"week_start_date\": null,\n      \"week_end_date\": null,\n      \"total_hours\": null,\n      \"client_name\": null\n    }\n  }\n]\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -6496,
        624
      ],
      "id": "2991f6ed-5854-4bd4-b98b-06be7318d56a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "mistral-medium-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -6400,
        848
      ],
      "id": "ec1fa1cb-5432-41c8-802f-979c51851acb",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "pdf/doc"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/png",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/tiff",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/gif",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $json.file_type }}",
                    "rightValue": "image/bmp",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "c37ac318-a1ae-40b7-86d6-d4f46180b96c",
      "name": "Switch File Type1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -7680,
        576
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "530eae36-2bc2-4f6f-8755-73b44da913e4",
              "name": "content",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6752,
        608
      ],
      "id": "400dffe2-343f-4325-909b-eb88804ada7f",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ JSON.parse($json[\"data\"][0]).blocks[0].content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6816,
        864
      ],
      "id": "8d352982-7410-421c-9f55-35671ea6164a",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "2288d0d0-4a46-447b-a014-4b571e77601c",
      "name": "Mistral Upload1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7232,
        432
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "5ac4c66d-f1f4-4c34-b654-406b14ae8bee",
      "name": "Mistral Signed URL1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7008,
        432
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "id": "42a0dcd2-3e42-40f3-adfc-6ec55e1c8433",
      "name": "Mistral DOC OCR1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -6784,
        432
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ $json.pages[0].markdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6608,
        464
      ],
      "id": "6a857e8f-66d6-446d-a0f8-62b1398480a8",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -6912,
        608
      ],
      "id": "0765daed-c7af-4435-812e-9553fc924ea4",
      "name": "Aggregate3"
    },
    {
      "parameters": {
        "jsCode": "// input[0].json contains your JSON\nconst outputString = $json[\"output\"];\n\n// Parse the string\nconst parsedJSON = JSON.parse(outputString);\n\n// Return as n8n items\nreturn parsedJSON.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6144,
        624
      ],
      "id": "1bf0f9a1-677a-4972-8a23-4acea5226094",
      "name": "Code10"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload1').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "897257c6-b60f-4f58-a2ba-579844916745",
      "name": "Mistral file delete",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -6432,
        160
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -7408,
        880
      ],
      "id": "d180a5d5-5d04-4468-8846-578fed19f108",
      "name": "HTTP Request3",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e5bd95ba-8269-404a-bf9d-fa0d25398b59",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7456,
        432
      ],
      "id": "51fd1327-657a-4ffb-b98a-4eb7eacfee7b",
      "name": "Edit Fields10"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const firstKey = Object.keys(item.binary || {})[0];\n\n  if (!firstKey) return item;\n\n  return {\n    json: item.json,\n    binary: { data: item.binary[firstKey] },\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8048,
        3840
      ],
      "id": "f438e3f9-6d86-4a7e-8122-e516236c7cb3",
      "name": "Code2"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -8864,
        4304
      ],
      "id": "5f628a2b-d25f-4ea5-9f61-7781401c5e1d",
      "name": "Loop: Process Each Attachment1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12c3738c-4b46-44fe-a482-efeb1beda924",
              "name": "=Employee Name",
              "value": "={{ $json.document_info.employee_name }}\n\n\n",
              "type": "string"
            },
            {
              "id": "b6bdd6c3-f57d-4695-9863-68e37b3bf10b",
              "name": "=Total Billable hours",
              "value": "={{ $json.document_info.total_hours }}\n\n",
              "type": "string"
            },
            {
              "id": "f826dc43-34ca-47bf-a823-9e21c0a46df8",
              "name": "Week Start Date",
              "value": "={{ $json.document_info.week_start_date }}\n",
              "type": "string"
            },
            {
              "id": "faf34b88-5e61-4c15-97b6-7c933d69c279",
              "name": "Week End Date",
              "value": "={{ $json.document_info.week_end_date }}\n",
              "type": "string"
            },
            {
              "id": "95dd93b1-8e25-422f-b6fb-73bf65aa792e",
              "name": "Client Name",
              "value": "={{ $json.document_info.client_name }}",
              "type": "string"
            },
            {
              "id": "8c92f891-1393-4199-b9ba-3683750455f1",
              "name": "Current Year",
              "value": "={{ new Date($json.document_info.week_start_date).getFullYear() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6464,
        4032
      ],
      "id": "6f01f57f-8dd2-4a38-9d52-7afab9a97982",
      "name": "Set Timesheet JSON Fields1"
    },
    {
      "parameters": {
        "options": {
          "headerRow": true
        }
      },
      "id": "058a9de1-f863-4bad-95a1-f1a5c6ec72d3",
      "name": "Read Spreadsheet File2",
      "type": "n8n-nodes-base.spreadsheetFile",
      "position": [
        -7968,
        4016
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Convert Excel serial date -> YYYY-MM-DD\nconst base = new Date(Date.UTC(1899, 11, 30));\nfunction fromSerial(s) {\n  if (!s || isNaN(Number(s))) return s; // skip if not a number\n  const ms = Number(s) * 86400 * 1000;\n  return new Date(base.getTime() + ms).toISOString().slice(0, 10);\n}\n\nreturn items.map(item => {\n  let row = { ...item.json };\n\n  // Convert possible date fields\n  if (row.__EMPTY && !isNaN(row.__EMPTY)) {\n    row.__EMPTY = fromSerial(row.__EMPTY);\n  }\n  if (row.__EMPTY_1 && !isNaN(row.__EMPTY_1) && row[\" Contractor Timesheet\"]?.includes(\"Weekending\")) {\n    row.__EMPTY_1 = fromSerial(row.__EMPTY_1);\n  }\n\n  return { json: row };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7728,
        4016
      ],
      "id": "0695e839-f53e-4496-a890-327541d9dbf9",
      "name": "Code7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=that is syten prompt this is usee prompt You must respond ONLY with valid raw rendered JSON. - Do NOT include the word \"json\". - Do NOT include the word \"\njson\".\n- Do NOT use triple backticks or markdown formatting.\n- Do NOT wrap the response in any key like \"output\".\n- Do NOT write anything starting at output directly start with valid root-level JSON.\n- Only respond with a valid, root-level JSON object.\n- Do NOT skip any line item. \n\n{{ $json.content }}\n",
        "options": {
          "systemMessage": "=Extract data *only* from the BILLABLE HOURS or DAYS section.\n\nIgnore:  \n- “Period Ending”, signature dates, headers, or footers  \n- NON-BILLABLE, HOLIDAY, LEAVE, or any other unrelated sections  \n\nExtract billable hours data and working hours *month by month*, with the following fields:  \n\nFor each month found in the **Total Billable hours/days** row, return:  \n- `\"month\"`: Full month name (e.g., July)  \n- `\"year\"`: 4-digit year  \n- `\"Week Starting Date\"`: First date in that month from the BILLABLE HOURS row (even if hours = 0), format: MM/DD/YYYY  \n- `\"Week Ending Date\"`: Last date in that month from the BILLABLE HOURS row (even if hours = 0), format: MM/DD/YYYY  \n- `\"Total Hours\"`: Only add up the **first 7 numbers** (Mon–Sun) in the **Total Billable hours/days** row. Ignore any 8th number, which is the weekly total.  \n\n###(very important):Strict Rule for Total Billable hours :\n- Only use the first 7 numbers (Mon–Sun) in the `Total Billable hours/days` row.  \n- Ignore all other numbers in this row (like the 8th number, weekly total).  \n- Do NOT use numbers from any other row.  \n- Map each of these 7 numbers to the exact date listed in the header.  \n- Sum only these numbers per month.  \n- Example:  \nRow: \"Total Billable hours/days or TOTAL ALL HOURS/days 0.00 0.00 0.00 0.00 8.00 0.00 0.00 8.00\"  \nUse: 0.00 + 0.00 + 0.00 + 0.00 + 8.00 + 0.00 + 0.00 = 8  \nIgnore: the last 8.00 (weekly total).  \nin this case Total Billable hours = 8.0 its shouldn't be 16.0 this is wrong\n\n\nRules:  \n- Ignore all rows and totals from the “Non-Billable/Other Hours” section.  \n- Do not double count anything — only calculate using the individual day columns under **Total Billable hours/days**.  \n- For split weeks (end of one month + start of another), include only the dates that belong to that month.  \n- Each month should contain *only its own dates and billable hours*.  \n- Do not skip a month just because hours are 0 — still include the correct week start/end dates and `\"Total Hours\": 0`.  \n\nSpecial Handling for Split Weeks:  \n- If a week includes dates across two months (e.g., Jun-30 to Jul-6), split them by month.  \n- Sum only the daily hours belonging to each month.  \n\n\n\nIf the BILLABLE HOURS row shows:  \n`Jun-30 Jul-1 Jul-2 Jul-3 Jul-4 Jul-5 Jul-6`  \n\nReturn the output in **valid JSON only**. Do not include explanations, notes, or any extra text outside JSON.  \n\nExample JSON Output:\n\n```json\n{\n  \"Employee Name\": \"Ravi Katta\",\n  \"Client\": \"Casper\",\n  \"month1\": {\n    \"month\": \"July\",\n    \"year\": 2025,\n    \"Week Starting Date\": \"07/28/2025\",\n    \"Week Ending Date\": \"07/31/2025\",\n    \"Total Hours\": 0\n  },\n  \"month2\": {\n    \"month\": \"August\",\n    \"year\": 2025,\n    \"Week Starting Date\": \"08/01/2025\",\n    \"Week Ending Date\": \"08/01/2025\",\n    \"Total Hours\": 8\n  }\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -7104,
        4032
      ],
      "id": "26fd4c22-7e61-4cff-9a90-77350647edc2",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": "mistral-small-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -7184,
        4528
      ],
      "id": "b7c886a3-4fe1-4b95-91d0-e9788c779e63",
      "name": "Mistral Cloud Chat Model1",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "509a71b4-8c1b-419b-8d8b-fc2c68b86bf2"
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/msword",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e492cbb6-eaca-42fa-95b6-8cb1363b1ead"
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "44e10cb4-4d6a-41f4-a34d-f9f635e6c998"
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "33eaa3dd-d6c6-4fbb-a625-9db12fd6b13c"
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "pdf/doc"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/vnd.ms-excel",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "excel"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "image/jpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "image/png",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "image/tiff",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "image/jpg",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b7c6b1a4-cce5-4912-9c24-2bb7527d6d38"
                  },
                  {
                    "leftValue": "={{ $binary[Object.keys($binary)[0]].mimeType }}",
                    "rightValue": "image/bmp",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "id": "1cd06c70-d6a1-453c-86c7-f6f0c1933f41",
      "name": "Switch File Type2",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -8208,
        3968
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "530eae36-2bc2-4f6f-8755-73b44da913e4",
              "name": "content",
              "value": "={{ $json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7360,
        4016
      ],
      "id": "7e69214d-aeee-488e-bdf1-ea2d7829ff41",
      "name": "Edit Fields11"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ JSON.parse($json[\"data\"][0]).blocks[0].content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7424,
        4272
      ],
      "id": "345b353c-e518-4a13-aec1-791b1a3230d4",
      "name": "Edit Fields12"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "a908bd7c-cfa8-438e-9425-d1a405571253",
      "name": "Mistral Upload2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7840,
        3840
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "1"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "a6905d46-52e5-4f96-ae01-e3b83fbe6b7b",
      "name": "Mistral Signed URL2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7616,
        3840
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": false\n}\n",
        "options": {}
      },
      "id": "4a17e653-93d1-42eb-9c55-e80b4a1ac7fb",
      "name": "Mistral DOC OCR2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7392,
        3840
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cefc6cbe-dcc3-4cd5-bf3c-735320ece1fe",
              "name": "content",
              "value": "={{ $json.pages[0].markdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7216,
        3872
      ],
      "id": "79504e33-b191-412d-aa25-efcb961dc693",
      "name": "Edit Fields13"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -7520,
        4016
      ],
      "id": "bc8e9fb0-5519-4578-931f-78568f06134b",
      "name": "Aggregate4"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload2').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "f1511a7a-38c5-4bfc-9d2a-874a0e1177ba",
      "name": "Mistral file delete1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -7040,
        3568
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -7680,
        4272
      ],
      "id": "30e23854-f0f4-4bf4-b592-ab9f0fc98225",
      "name": "HTTP Request4",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const firstKey = Object.keys(item.binary || {})[0];\n\n  if (!firstKey) return item;\n\n  return {\n    json: item.json,\n    binary: { data: item.binary[firstKey] },\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7936,
        4256
      ],
      "id": "9e516907-4eed-4a07-8ea9-24de28cef3f1",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "let outputData = $json[\"output\"];\n\n// Handle missing/empty case\nif (!outputData) {\n  return [];\n}\n\nif (typeof outputData === \"string\") {\n  // Remove Markdown code fences like ```json ... ```\n  outputData = outputData.replace(/```[a-z]*\\n?/gi, \"\").replace(/```/g, \"\").trim();\n\n  try {\n    outputData = JSON.parse(outputData);\n  } catch (e) {\n    // Fallback: wrap raw string as json\n    return [{ json: { raw_output: $json[\"output\"] } }];\n  }\n}\n\n// Ensure it's an array\nif (!Array.isArray(outputData)) {\n  outputData = [outputData];\n}\n\n// Return as proper n8n items\nreturn outputData.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6656,
        4032
      ],
      "id": "e66d1f2e-d417-4928-9661-4a9e797b062f",
      "name": "Code4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -7696,
        2464
      ],
      "id": "ac3e009b-03bf-481f-b01b-2fa783995056",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -5376,
        4096
      ],
      "id": "2eb09dea-6b60-4772-8eda-69303a4d4c1d",
      "name": "Wait1",
      "webhookId": "dc8c64fa-3aeb-432d-8507-3b6229b4dae7"
    },
    {
      "parameters": {
        "jsCode": "// Run Once For All Items\n\n// ----- Helpers -----\nfunction findDateString(obj) {\n  const datePatterns = [\n    /(\\d{1,2}\\/\\d{1,2}\\/\\d{2,4})/,        // 08/25/2025\n    /(\\d{4}[-\\/]\\d{1,2}[-\\/]\\d{1,2})/,    // 2025-08-25\n    /([A-Za-z]{3,}\\s+\\d{1,2},\\s*\\d{4})/   // Aug 25, 2025\n  ];\n  for (const v of Object.values(obj)) {\n    if (v == null) continue;\n    const s = String(v).replace(/\\r/g,' ').replace(/\\n/g,' ').trim();\n    for (const pat of datePatterns) {\n      const m = s.match(pat);\n      if (m) return m[1];\n    }\n  }\n  return null;\n}\n\nfunction parseDateString(dateStr) {\n  if (!dateStr) return null;\n  dateStr = dateStr.trim();\n\n  // YYYY-MM-DD or YYYY/MM/DD\n  let m = dateStr.match(/^(\\d{4})[-\\/](\\d{1,2})[-\\/](\\d{1,2})$/);\n  if (m) return new Date(parseInt(m[1],10), parseInt(m[2],10)-1, parseInt(m[3],10));\n\n  // MM/DD/YYYY or M/D/YY(YY)\n  m = dateStr.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})$/);\n  if (m) {\n    let mo = parseInt(m[1],10), d = parseInt(m[2],10), y = parseInt(m[3],10);\n    if (y < 100) y += y >= 70 ? 1900 : 2000;\n    return new Date(y, mo-1, d);\n  }\n\n  // \"Aug 25, 2025\"\n  m = dateStr.match(/^([A-Za-z]{3,})\\s+(\\d{1,2}),\\s*(\\d{4})$/);\n  if (m) {\n    const mo = new Date(`${m[1]} 1, 2000`).getMonth();\n    return new Date(parseInt(m[3],10), mo, parseInt(m[2],10));\n  }\n\n  // fallback\n  const dt = new Date(dateStr);\n  return isNaN(dt) ? null : dt;\n}\n\n// ----- Collect entries robustly -----\nlet entries = [];\n\n// Case A: many incoming items (each timesheet is its own item)\nif (items.length > 1) {\n  entries = items.map(i => {\n    // normalize values: strip newlines from string fields\n    const normalized = {};\n    for (const [k,v] of Object.entries(i.json)) {\n      normalized[k] = typeof v === 'string' ? v.replace(/\\r/g,' ').replace(/\\n/g,' ').trim() : v;\n    }\n    return normalized;\n  });\n}\n// Case B: single incoming item that contains an array (e.g., previous Aggregate produced { data: [...] })\nelse if (items.length === 1) {\n  const single = items[0].json;\n\n  if (Array.isArray(single.data)) {\n    entries = single.data.map(obj => {\n      const normalized = {};\n      for (const [k,v] of Object.entries(obj)) {\n        normalized[k] = typeof v === 'string' ? v.replace(/\\r/g,' ').replace(/\\n/g,' ').trim() : v;\n      }\n      return normalized;\n    });\n  } else if (Array.isArray(single.items)) {\n    entries = single.items.map(obj => {\n      const normalized = {};\n      for (const [k,v] of Object.entries(obj)) {\n        normalized[k] = typeof v === 'string' ? v.replace(/\\r/g,' ').replace(/\\n/g,' ').trim() : v;\n      }\n      return normalized;\n    });\n  } else {\n    // single item is itself a timesheet object\n    const normalized = {};\n    for (const [k,v] of Object.entries(single)) {\n      normalized[k] = typeof v === 'string' ? v.replace(/\\r/g,' ').replace(/\\n/g,' ').trim() : v;\n    }\n    entries = [normalized];\n  }\n}\n\n// Debug: counts\nconsole.log('incoming items length:', items.length);\nconsole.log('collected entries length:', entries.length);\n\n// ----- Extract and parse dates -----\nentries.forEach((r, idx) => {\n  const found = findDateString(r) || null;\n  const parsed = parseDateString(found);\n  r.__foundDateStr = found;\n  r.__parsedTimestamp = parsed ? parsed.getTime() : null;\n  // keep an ISO string for human-readable output\n  r.parsedDateISO = parsed ? parsed.toISOString().slice(0,10) : null;\n  console.log(`entry ${idx} found='${found}' parsed=${r.__parsedTimestamp}`);\n});\n\n// ----- Sort (ascending), push nulls to end -----\nentries.sort((a,b) => {\n  const ta = a.__parsedTimestamp, tb = b.__parsedTimestamp;\n  if (ta === null && tb === null) return 0;\n  if (ta === null) return 1;\n  if (tb === null) return -1;\n  return ta - tb;\n});\n\n// Return as separate items, ready for Google Sheets append\nreturn entries.map(r => ({ json: r }));\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5712,
        4000
      ],
      "id": "a447ca98-880b-4377-ac05-cd22cf49cdb0",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    data: items[0].json\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -6256,
        4032
      ],
      "id": "95f4d371-f09d-49c3-a8bf-4f0cd4500645",
      "name": "Code12"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6992,
        4336
      ],
      "id": "28b79bc1-4454-4eeb-997f-1dcb09659252",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-08T08:07:40.199Z",
      "updatedAt": "2025-09-08T08:07:40.199Z",
      "role": "workflow:owner",
      "workflowId": "D16Ti8vZ7WqtF8Xy",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-12T11:18:35.000Z",
  "versionId": "29547533-72a1-46c6-a660-74544d723c05"
}