{
  "active": true,
  "connections": {
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Follow-Up Prompt Generator Agent": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Direct": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        []
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Follow-Up Prompt Generator Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Follow-Up Prompt Generator Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Google Drive4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Google Drive4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive4": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        []
      ]
    },
    "Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store": {
      "ai_tool": [
        []
      ]
    },
    "Embeddings Mistral Cloud1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-10T18:45:36.409Z",
  "id": "dCpuT0xi56nEX6MA",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "chat test",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4fd70be3-d994-480b-8f3e-f91e379e76a9",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2400,
        224
      ],
      "id": "6cebbd81-1e05-4205-b146-f8a28f34364d",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        2592,
        432
      ],
      "id": "23f2126e-d9cc-4b6c-909b-ce7c9139f734",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Chatbot response: {{ $json.response }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Role\nYou are an AI assistant specialized in generating concise, highly relevant follow-up prompts (auto-suggestion responses) for a chatbot interface. Your objective is to enhance user engagement by suggesting what the user might naturally want to ask next, based on the chatbot’s latest response and the conversation history.\n\n# Context\nYou will receive:\n- The final chatbot response (the most recent message sent by the bot to the user).\n- The complete conversation history up to that point. \n\nYour task is to analyze both the final response and the preceding conversation to understand the user’s needs, intentions, and possible next steps. The follow-up prompts you generate should help the user continue the conversation seamlessly, clarify information, or explore related topics.\n\n# Examples\n\n#### Example 1:\n**Final bot response:**\n\"Your order has been shipped and is on its way.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Track my order\",\n  \"Order details\",\n  \"Cancel order\"\n]\n```\n\n#### Example 2:\n**Final bot response:**\n\"The weather today is sunny with a high of 28°C.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Tomorrow's forecast\",\n  \"Rain this week?\",\n  \"UV index\"\n]\n```\n\n#### Example 3:\n**Final bot response:**\n\"You can reset your password from the account settings page.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Reset password\",\n  \"Account help\",\n  \"Contact support\"\n]\n```\n\n# Strict Rules & Boundaries\n\n- **Context Awareness:** All prompts must be directly relevant to both the final bot response and the conversation.\n- **Relevance:** Suggestions should reflect what the user is most likely to ask next, based on the current context.\n- **Brevity:** Each prompt must be concise (ideally under 5 words).\n- **Actionable:** Write prompts as clickable suggestions that encourage further interaction.\n- **Format:** Output only a JSON array of strings, with no extra explanation, formatting, or text.\n- **No Repetition:** Do not repeat prompts already present in the conversation.\n- **No Questions for the AI:** Prompts should be phrased as user actions or queries, not as instructions for the AI.\n- **No Out-of-Scope Prompts:** Avoid generic or unrelated suggestions; keep all prompts tightly focused on the immediate context.\n- **Limit:** Always provide exactly 3 suggestions—never more, never fewer."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        2608,
        272
      ],
      "id": "42fcc8e9-fa39-43a4-94b4-730a6ecbc42f",
      "name": "Follow-Up Prompt Generator Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\"prompt 1\", \"prompt 2\", \"prompt 3\"]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2704,
        432
      ],
      "id": "6d99f783-1d15-42e9-b966-2721d5ad13df",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3264,
        176
      ],
      "id": "d9454599-480b-4169-adb1-eb9cd95403c1",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2944,
        224
      ],
      "id": "09295913-7836-40ba-8d66-2b566dcef57c",
      "name": "Edit Fields3",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2736,
        832
      ],
      "id": "b30bb6c0-4551-4737-a682-ad49b832e412",
      "name": "Edit Fields5",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2464,
        160
      ],
      "id": "403a3d45-3333-45bf-aa60-c6d024e6277f",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.que }}",
        "options": {
          "systemMessage": "You are a website-embedded AI assistant.\n\nAlways follow these strict rules:\n\n1. First, use Supabase vector search (dense retrieval) to find related website content.\n2. Second, use Supabase direct search (sparse retrieval) to find exact match content.\n3. Both searches use the same website content database. Always perform both.\n4. Answer only using the site’s content. Keep answers very short and precise.\n5. If the user **explicitly mentions a blog** (e.g., \"send the blog on X\" or \"blog about Y\"), include a direct clickable link to that blog.\n6. If the user provides a URL, fetch and summarize or answer based on that page’s content.\n7. If the information is not found, say exactly: **“I couldn’t find that on this site.”**\n8. If the user asks a general question unrelated to the website, respond briefly and conversationally.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1728,
        320
      ],
      "id": "4a1f2144-7d92-4ea6-9e12-aca727990ace",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {
          "responseMode": "lastNode"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1440,
        -752
      ],
      "id": "228ba09a-694a-4d12-bdcc-badca5bc3d7f",
      "name": "When chat message received",
      "webhookId": "d536879e-1fa5-45f6-b106-25f580ea92f4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "frequencyPenalty": 1,
          "presencePenalty": 1,
          "temperature": 0.5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -608,
        -640
      ],
      "id": "58d3d836-ddef-4994-9c64-8b1e187e0d43",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-ada-002",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -208,
        -240
      ],
      "id": "bfe37176-dd90-4800-b950-7f3986cbb65d",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fefb9175-75ea-4fbd-8725-d2a10a675dac",
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1216,
        -752
      ],
      "id": "57b37276-9d08-4394-a9b8-e4980ceaf841",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93dbee73-1e37-4377-91df-73eb3760d4b9",
              "name": "que",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -992,
        -864
      ],
      "id": "d4144194-b591-47d4-b91e-c8797c757ee0",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8c5bd4cb-7170-4b98-9201-a96efa313c67",
              "name": "que",
              "value": "={{ $json.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -992,
        -656
      ],
      "id": "afa800c2-8b1e-4f27-a857-b611652d7c55",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -384,
        -576
      ],
      "id": "73ee67d0-f1e4-4f33-a240-8d60aca8c55e",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', `website url`, 'string') }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        176,
        -544
      ],
      "id": "536302a5-fad0-4654-98dc-b6c52c00a921",
      "name": "HTTP Request",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "n8n_test",
        "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Limit', `Number of rows to return, default 4, max 10`, 'number') }}",
        "filters": {
          "conditions": [
            {
              "keyName": "content",
              "condition": "ilike",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Field_Value', `word to search, use \"*\" for wildcard placeholder, Example \"*ai*\"`, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        128,
        -240
      ],
      "id": "524a24fd-858a-45fa-aa57-0eb5447ff4a9",
      "name": "Supabase Direct",
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -768,
        -752
      ],
      "id": "81f21901-e5a5-4d1f-a4fb-2212bb07e738",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.que }}",
        "options": {
          "systemMessage": "=You are the official AI assistant for this website. \nYour role is to inform and guide visitors about the brand’s offerings, services, and value. \nYour ONLY knowledge source is the supabase table \"chatdbtai\". \n\nRules:\n1. Always use vector  search on \"chatdbtai\". Base all answers only on that content.\n2. Speak in a clear, friendly, and conversational tone — like a website guide helping a visitor understand the brand.\n3. When asked “what does DBT offer” or “AI services,” explain the different offerings in a structured way:\n   - Summarize in 1–2 sentences.\n   - Then list the services / offerings as **bullet points** or **bold keywords**.\n   - Focus on benefits (what the visitor gains).\n4. If the user asks about a blog, share a direct clickable link from \"chatdbtai\".\n5. If the user provides a URL:\n   - If it exists in \"chatdbtai\", answer from that record.\n   - If not, summarize the page briefly.\n6. If nothing relevant is found, reply exactly:\n   “I couldn’t find that on this site.”\n7. If the question is unrelated to the website, give a short conversational reply, then guide the visitor back to brand services if possible.\n8. Never show database details, queries, or hidden fields.\n\nStyle:\n- Use short, engaging sentences.\n- Highlight brand strengths and services clearly.\n- Prefer **lists** for multiple offerings.\n- Keep it visitor-focused: how DBT helps them.\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -304,
        -752
      ],
      "id": "aa6f0314-0334-49c5-9144-3cb0b7db317b",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "chatdbtai",
        "toolDescription": "Get rekated data",
        "tableName": {
          "__rl": true,
          "value": "chatdbtai",
          "mode": "list",
          "cachedResultName": "chatdbtai"
        },
        "topK": 10,
        "options": {
          "queryName": "match6_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        -272,
        -384
      ],
      "id": "3cc0cf42-b76a-4c1d-a476-a130928a249b",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4fd70be3-d994-480b-8f3e-f91e379e76a9",
              "name": "response",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1520,
        -768
      ],
      "id": "56a311ab-8f2d-4334-a0a1-dac632a38f6b",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        1776,
        -528
      ],
      "id": "a5505d63-54ab-42f8-adf0-37ae99c607f2",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Chatbot response: {{ $json.response }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Role\nYou are an AI assistant specialized in generating concise, highly relevant follow-up prompts (auto-suggestion responses) for a chatbot interface. Your objective is to enhance user engagement by suggesting what the user might naturally want to ask next, based on the chatbot’s latest response and the conversation history.\n\n# Context\nYou will receive:\n- The final chatbot response (the most recent message sent by the bot to the user).\n- The complete conversation history up to that point. \n\nYour task is to analyze both the final response and the preceding conversation to understand the user’s needs, intentions, and possible next steps. The follow-up prompts you generate should help the user continue the conversation seamlessly, clarify information, or explore related topics.\n\n# Examples\n\n#### Example 1:\n**Final bot response:**\n\"Your order has been shipped and is on its way.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Track my order\",\n  \"Order details\",\n  \"Cancel order\"\n]\n```\n\n#### Example 2:\n**Final bot response:**\n\"The weather today is sunny with a high of 28°C.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Tomorrow's forecast\",\n  \"Rain this week?\",\n  \"UV index\"\n]\n```\n\n#### Example 3:\n**Final bot response:**\n\"You can reset your password from the account settings page.\"\n**Generated follow-up prompts:**\n```json\n[\n  \"Reset password\",\n  \"Account help\",\n  \"Contact support\"\n]\n```\n\n# Strict Rules & Boundaries\n\n- **Context Awareness:** All prompts must be directly relevant to both the final bot response and the conversation.\n- **Relevance:** Suggestions should reflect what the user is most likely to ask next, based on the current context.\n- **Brevity:** Each prompt must be concise (ideally under 5 words).\n- **Actionable:** Write prompts as clickable suggestions that encourage further interaction.\n- **Format:** Output only a JSON array of strings, with no extra explanation, formatting, or text.\n- **No Repetition:** Do not repeat prompts already present in the conversation.\n- **No Questions for the AI:** Prompts should be phrased as user actions or queries, not as instructions for the AI.\n- **No Out-of-Scope Prompts:** Avoid generic or unrelated suggestions; keep all prompts tightly focused on the immediate context.\n- **Limit:** Always provide exactly 3 suggestions—never more, never fewer."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1744,
        -768
      ],
      "id": "f8c9cc13-cae1-4979-8d76-409abae9cbc1",
      "name": "Follow-Up Prompt Generator Agent1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\"prompt 1\", \"prompt 2\", \"prompt 3\"]"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2048,
        -464
      ],
      "id": "d2be516a-202d-4c2d-a8d4-df8a57d01c26",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2448,
        -816
      ],
      "id": "1e2c559e-4202-4754-8c73-608715230dea",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2128,
        -768
      ],
      "id": "67048d0d-a6f0-4fe1-a035-b117b76a3eb1",
      "name": "Edit Fields7",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -864,
        640
      ],
      "id": "631765b9-f8d3-4234-bdf5-dad7a8c1a7ce",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "value": "={{ $json.modifiedTime }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "86784691-cea6-48fb-849a-1896a23e5bd1",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        368
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        240,
        592
      ],
      "id": "bf680f0c-1e7b-47c1-998e-506b15da4502",
      "name": "Wait",
      "webhookId": "29a6451b-8a53-4598-b4fe-e11241eb51ab"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $json.content.parseJson().metadata.source }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $json.content.parseJson().metadata.source_metadata_id }}"
              }
            ]
          }
        }
      },
      "id": "eba19774-d146-4650-96d8-8e47da709907",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        784,
        624
      ]
    },
    {
      "parameters": {
        "chunkSize": 10000000
      },
      "id": "80f188fc-76db-484a-8ba8-d9c553faf725",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1104,
        1040
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "chatdbtai",
          "mode": "list",
          "cachedResultName": "chatdbtai"
        },
        "options": {
          "queryName": "match6_documents"
        }
      },
      "id": "0879853c-64cf-4ee8-8cb2-58359260eeeb",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1088,
        720
      ],
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 0. Parse the incoming Document data\nlet raw = $input.first().json['Document data'];\nlet arr = typeof raw === 'string' ? JSON.parse(raw) : raw;\n\n// If document name exists, use it — else fallback\nlet source = $input.first().json['Document name'] || 'unknown_source';\n\n// If your workflow previously had a reference like $('Insert Document Metadata1')\n// and it caused an \"unexecuted\" error, we replace it with a safe null or fetch from input\nlet source_id = $input.first().json['source_metadata_id'] || $input.first().json['source'] || $input.first().json[' source'] || null;\n\n// Helper: return character length of an array object\nfunction getObjLength(obj) {\n  return (obj.content || '').length;\n}\n\nfunction getObjLengthofTextOnly(obj) {\n  // Ignore OCR images for character count\n  if (obj.type === 'image_ocr') return 0;\n  return (obj.content || '').length;\n}\n\n// Split any single item whose content is > chunkSize into multiple items\nfunction splitOversizedItems(arr, chunkSize) {\n  const result = [];\n  for (const item of arr) {\n    const content = item.content || '';\n    if (content.length <= chunkSize) {\n      result.push(item);\n    } else {\n      for (let start = 0; start < content.length; start += chunkSize) {\n        const part = content.slice(start, start + chunkSize);\n        result.push({ ...item, content: part });\n      }\n    }\n  }\n  return result;\n}\n\n// Chunking function\nfunction chunkByCharLength(arr, source, chunkSize = 1000) {\n  const flat = splitOversizedItems(arr, chunkSize);\n  const response = [];\n  let idx = 0;\n  let charPos = 0;\n\n  while (idx < flat.length) {\n    const a = [];\n    let sum = 0;\n    const from = charPos;\n\n    while (idx < flat.length && sum < chunkSize) {\n      const item = flat[idx];\n      const len = getObjLength(item);\n      const text_len = getObjLengthofTextOnly(item);\n      a.push(item);\n      sum += len;\n      charPos += text_len;\n      idx++;\n    }\n\n    const to = charPos;\n    const metadata = {\n      source: source,\n      source_metadata_id: source_id,\n      loc: { Characters: { from, to } }\n    };\n\n    response.push({\n      content: JSON.stringify({\n        pageContent: a,\n        metadata\n      })\n    });\n  }\n  return response;\n}\n\n// 1. Run chunking\nconst chunks = chunkByCharLength(arr, source, 1000);\n\n// 2. Return in n8n-compatible format\nreturn chunks.map(c => ({ json: c }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        384
      ],
      "id": "16c72749-ffd8-47a4-a641-45dbe721561b",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://universal-file-to-text-extractor.vercel.app/extract",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "single"
            },
            {
              "name": "output_type",
              "value": "jsonl"
            },
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "data"
            },
            {
              "name": "include_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        368
      ],
      "id": "6f710954-0aa1-4ac6-9950-357b51cb204e",
      "name": "HTTP Request2",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1o3DK9Ceka5Lqb8irvFSfEeB8SVGG_OL7",
            "mode": "list",
            "cachedResultName": "Website kb",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1o3DK9Ceka5Lqb8irvFSfEeB8SVGG_OL7"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1088,
        640
      ],
      "id": "6b11c735-fc44-4886-b791-ef3204490b84",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "tableId": "dbtai_kb",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.file_title }}"
            },
            {
              "fieldId": "url",
              "fieldValue": "={{ $json.file_url }}"
            },
            {
              "fieldId": "drive_file_id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "last_modified_date",
              "fieldValue": "={{ $json.last_modified_date }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -432,
        368
      ],
      "id": "4f0b7110-1a9d-4996-8c94-32ec8958da94",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "9dYMIwoCFFwT3ZmR",
          "name": "Supabase account 6 ayan"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID1').item.json.file_id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -208,
        368
      ],
      "id": "964967e1-afcd-4269-8cd7-1699c72ee49a",
      "name": "Google Drive4",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('HTTP Request2').item.json.data[0].parseJson().source }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $('HTTP Request2').item.json.data[0].parseJson().blocks }}",
              "type": "string"
            },
            {
              "id": "1087ab34-5643-4755-b545-cf34d0ae2cd2",
              "name": " source",
              "value": "={{ $('Google Drive4').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        368
      ],
      "id": "c9644f40-8368-4540-8571-b94452389142",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        240,
        368
      ],
      "id": "b1a19b46-34d6-450f-ad7f-a61ea7d5c56c",
      "name": "If2"
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "23399e24-5d19-4c20-bd05-8269b7ef8ebf",
      "name": "Embeddings OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1184,
        976
      ],
      "credentials": {
        "openAiApi": {
          "id": "BEMsaCWtnyqTUtIt",
          "name": "OpenAi account 8 dbt digi"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"output\": {{ JSON.stringify($('AI Agent1').item.json.output) }},\n  \"followUpPrompts\": {{ $json.output }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        672,
        -16
      ],
      "id": "2607b6e8-c67c-4ace-9f93-222def23488f",
      "name": "Edit Fields9",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2688,
        -720
      ],
      "id": "030e16e5-f7f0-455d-bfce-a3577eaeeeb3",
      "name": "Respond to Webhook3"
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "docragtestkb",
          "mode": "list",
          "cachedResultName": "docragtestkb"
        },
        "embeddingBatchSize": "=200",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.1,
      "position": [
        816,
        384
      ],
      "id": "475e7af9-be44-4d23-8d8d-00e627cafd41",
      "name": "Qdrant Vector Store1",
      "credentials": {
        "qdrantApi": {
          "id": "hBirQvCk1VaV8cfQ",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        624,
        640
      ],
      "id": "3ca18e9e-c474-409e-88af-c97d04d8667a",
      "name": "Embeddings Mistral Cloud",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $('Code4').item.json[\"Document name\"] }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "source_url",
                "value": "={{ $('Code4').item.json[\"Source_url\"] }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $('Code4').item.json.source }}"
              },
              {
                "name": "department",
                "value": "ai_automation"
              },
              {
                "name": "PROJECT",
                "value": "={{ $('Code4').item.json.PROJECT }}"
              },
              {
                "name": "=DOCUMNENT_TYPE",
                "value": "={{ $('Code4').item.json.DOCUMENT_TYPE }}"
              },
              {
                "name": "ASSIGNED_TO",
                "value": "={{ $('Code4').item.json.ASSIGNEDTO }}"
              },
              {
                "name": "last_modified",
                "value": "={{ $('Code4').item.json.Last_modified }}"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              }
            ]
          }
        }
      },
      "id": "5680f1b4-b2f0-4eb2-b77e-4baa2c52406e",
      "name": "Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        656,
        928
      ]
    },
    {
      "parameters": {},
      "id": "a3273516-c860-455a-b851-f47e52b8634f",
      "name": "Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        720,
        992
      ]
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "use this data answer query",
        "qdrantCollection": {
          "__rl": true,
          "value": "docragtestkb",
          "mode": "list",
          "cachedResultName": "docragtestkb"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1.3,
      "position": [
        320,
        -720
      ],
      "id": "8b3306ca-c1b3-4ccc-b8ad-8f3c1404e1a8",
      "name": "Qdrant Vector Store",
      "credentials": {
        "qdrantApi": {
          "id": "4NinNhNX7VxfgZxs",
          "name": "QdrantApi account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        416,
        -512
      ],
      "id": "d088b84e-a9e3-4c20-9b2e-51fdf0579745",
      "name": "Embeddings Mistral Cloud1",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-10T18:45:36.416Z",
      "updatedAt": "2025-08-10T18:45:36.416Z",
      "role": "workflow:owner",
      "workflowId": "dCpuT0xi56nEX6MA",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": {
    "node:Schedule Trigger1": {
      "recurrenceRules": []
    },
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-25T08:12:52.000Z",
  "versionId": "b746d497-4213-4030-a2db-397de33af7f7"
}