{
  "active": false,
  "connections": {
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Insert Document Metadata2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [],
        [],
        [],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR3": {
      "main": [
        [
          {
            "node": "Mistral file delete5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase2": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata2": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-02T16:12:12.076Z",
  "id": "eaATC5EZqH8HDVna",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 24",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        912,
        256
      ],
      "id": "ade7b95b-6498-4abd-b26a-3084cf39a822",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "value": "={{ $json.modifiedTime }}",
              "type": "string"
            },
            {
              "id": "866ce582-16e2-4869-ac77-13f248c187eb",
              "name": "sharepoint_file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "feb4e20c-1526-4540-8cc6-3ff7ef33278d",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1392,
        256
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -208,
        256
      ],
      "id": "3ba62594-d56c-4432-8150-b6f3ef2a3963",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "sharepoint_file_id",
              "field2": "UniqueId"
            },
            {
              "field1": "Last_modified_date",
              "field2": "TimeLastModified"
            },
            {
              "field1": "Loading Done",
              "field2": "Exists"
            }
          ]
        },
        "fuzzyCompare": true,
        "options": {}
      },
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        528,
        176
      ],
      "id": "a0a202e6-66c7-4b98-b171-cfe1f29856b9",
      "name": "Compare Datasets"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('Set File ID1').item.json.file_title.replaceSpecialChars() }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $json.embedding_text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3344,
        256
      ],
      "id": "5f9e3da1-d434-4bc1-acc0-386cbef2d17d",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "={{ $('Insert Document Metadata2').item.json.id_source +\"_\"+ $json.fileName}}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4032,
        -16
      ],
      "id": "44035c75-398d-4bcb-86d7-d7fc2026754c",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": \"{{$json['image_base64'].split(',').pop()}}\",\n  \"fileName\": \"{{$json.id}}\",\n  \"mimeType\": \"image/jpeg\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3792,
        -16
      ],
      "id": "1dc1cf37-ac55-47f8-a02e-6a5a3c94df94",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e6dcc66-0501-4739-a738-909878c4b23d",
              "name": "images",
              "value": "={{ $json.images }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3488,
        -16
      ],
      "id": "ecb332f6-6781-4bbe-ba18-88521095679c",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "fieldToSplitOut": "images",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3632,
        -16
      ],
      "id": "2ef5d727-090f-4a6e-a2e3-08233646f374",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "ragtest",
        "fileName": "=",
        "additionalFields": {
          "parentFolderKey": "extracted_images"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        4224,
        -16
      ],
      "id": "ad6dd713-bfab-44ef-b91a-623dff3084d2",
      "name": "S3",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3120,
        272
      ],
      "id": "b87c73d8-100e-406a-8800-d9ae721794f7",
      "name": "If1"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $('Insert Document Metadata2').item.json.url }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $('Set File ID1').item.json.file_id }}"
              }
            ]
          }
        }
      },
      "id": "e2328597-33df-4423-97d6-c99c7703651b",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        3952,
        496
      ]
    },
    {
      "parameters": {
        "chunkSize": 10000
      },
      "id": "d1cf126d-d5ec-428d-a393-fc177e23c078",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        3872,
        720
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "74cbdb87-7e4c-44e9-803f-58a5eef1446d",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2144,
        272
      ],
      "typeVersion": 4.2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "e56dc55f-c22d-4225-87e9-0b7356e45f62",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2320,
        272
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": true\n}\n\n",
        "options": {}
      },
      "id": "aadd88b2-b050-420e-b912-d64939247715",
      "name": "Mistral DOC OCR3",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2464,
        272
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "795f13e8-c1de-4b64-95ee-08803713be63",
      "name": "Mistral file delete5",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2864,
        64
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "$input.item.binary.data.fileName = $input.first().json.title\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        272
      ],
      "id": "c844e9b5-052f-443f-941b-3289d9a73807",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function node\n// Keeps image array from input, inserts embedding_text inline with images\n\nconst pages = items[0].json.pages;\nlet output = [];\n\nfor (const page of pages) {\n  let text = `Page ${page.index}\\n\\n`;\n  let markdown = page.markdown;\n\n  // Replace each image markdown with annotation text if available\n  markdown = markdown.replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (match, alt, src) => {\n    const img = page.images.find(i => i.id === src || i.fileName === src);\n    if (img && img.image_annotation) {\n      const ann = JSON.parse(img.image_annotation);\n      return (\n        '{' +\n        `Image: [${img.id}]\\n` +\n        `Type: ${ann.image_type}\\n` +\n        `Short: ${ann.short_description}\\n` +\n        `Summary: ${ann.summary}\\n` +\n        '}'\n      );\n    }\n    return \"\"; // if no annotation, strip it\n  });\n\n  text += markdown.trim();\n\n  output.push({\n    json: {\n      page_index: page.index,\n      embedding_text: text,\n      images: page.images   // ✅ keep original images array\n    }\n  });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2944,
        272
      ],
      "id": "4518aaae-8092-469c-890c-792a46402a3f",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// 0. Get document data\nlet raw = $input.first().json['Document data'];   // raw is an array of pages\nlet source = $input.first().json['Document name'];\nlet source_id = $('Insert Document Metadata2').first().json.id;\n\n// Helper: return character length of an object's content\nfunction getObjLength(obj) {\n  return (obj.content || '').length;\n}\n\nfunction getObjLengthofTextOnly(obj) {\n  if (obj.type === 'image_ocr') return 0;\n  return (obj.content || '').length;\n}\n\n// Split oversized items by char length\nfunction splitOversizedItems(arr, chunkSize) {\n  const result = [];\n  for (const item of arr) {\n    const content = item.content || '';\n    if (content.length <= chunkSize) {\n      result.push(item);\n    } else {\n      for (let start = 0; start < content.length; start += chunkSize) {\n        const part = content.slice(start, start + chunkSize);\n        result.push({ ...item, content: part });\n      }\n    }\n  }\n  return result;\n}\n\n// Chunking function (per page)\nfunction chunkByCharLength(arr, source, pageNum, chunkSize = 1000) {\n  const flat = splitOversizedItems(arr, chunkSize);\n  const response = [];\n  let idx = 0;\n  let charPos = 0;\n\n  while (idx < flat.length) {\n    const a = [];\n    let sum = 0;\n    const from = charPos;\n\n    while (idx < flat.length && sum < chunkSize) {\n      const item = flat[idx];\n      const len = getObjLength(item);\n      const text_len = getObjLengthofTextOnly(item);\n      a.push(item);\n      sum += len;\n      charPos += text_len;\n      idx++;\n    }\n\n    const to = charPos;\n    const metadata = {\n      source: source,\n      source_metadata_id: source_id,\n      loc: { \n        page: pageNum,       // ✅ add page number here\n        Characters: { from, to } \n      }\n    };\n\n    response.push({\n      content: JSON.stringify({\n        pageContent: a,\n        metadata\n      })\n    });\n  }\n\n  return response;\n}\n\n// 1. Run chunking page by page\nlet chunks = [];\nraw.forEach((pageText, pageIndex) => {\n  let arr = [{ type: \"text\", content: pageText }];\n  let pageChunks = chunkByCharLength(arr, source, pageIndex + 1, 700); // pageIndex+1 for human-readable page no.\n  chunks.push(...pageChunks);\n});\n\n// 2. Return in n8n format\nreturn chunks.map(c => ({ json: c }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3664,
        256
      ],
      "id": "9ba5f3d8-1eb6-4d2d-9840-40337262a007",
      "name": "Code10"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        3808,
        480
      ],
      "id": "7dbbfa6e-151f-484b-8901-652f006f0e8e",
      "name": "Embeddings Mistral Cloud"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Document data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3504,
        256
      ],
      "id": "c4bac662-3f04-4b93-96dd-1fbee3afbf69",
      "name": "Aggregate"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4240,
        256
      ],
      "id": "8d7b714c-091f-4876-8db0-eb759cfb6738",
      "name": "Wait",
      "webhookId": "3b2de32e-b543-4a03-90cd-9b05e423339a"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4464,
        -48
      ],
      "id": "725e0420-9c14-4ed7-8005-d2f88461230a",
      "name": "Wait2",
      "webhookId": "a93353d9-cb90-4f0c-bdf0-423c0ae9af9d"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2688,
        272
      ],
      "id": "afab9bc8-cf5f-45d3-89c7-2c4d674331ac",
      "name": "Wait3",
      "webhookId": "2dbecc76-246b-4613-92c2-d0581a190786"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - SharePoint URL with Version Parameter\n// Use this in a \"Code\" node in n8n\n\nconst items = $input.all();\n\nconst outputItems = items.map(item => {\n  const data = item.json;\n  \n  // Use existing LinkingUrl if available\n  if (data.LinkingUrl) {\n    return {\n      json: {\n        ...data,\n        fileUrl: data.LinkingUrl\n      }\n    };\n  }\n  \n  // Construct versioned URL\n  let fileUrl = '';\n  \n  if (data.ServerRelativeUrl && data.ContentTag) {\n    // Base URL with server relative path\n    fileUrl = 'https://nosta.sharepoint.com' + data.ServerRelativeUrl;\n    \n    // Extract GUID from ContentTag and create version parameter\n    const guidMatch = data.ContentTag.match(/\\{([^}]+)\\}/);\n    if (guidMatch) {\n      const versionId = guidMatch[1].toLowerCase().replace(/-/g, '');\n      fileUrl += `?d=w${versionId}`;\n    }\n  }\n  \n  return {\n    json: {\n      ...data,\n      fileUrl: fileUrl\n    }\n  };\n});\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        272
      ],
      "id": "9c5bb4fa-17c9-48f5-8df2-6a382003dfc3",
      "name": "Code12"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "n8n_metadata",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        -48
      ],
      "id": "3f629377-d3d0-431b-ac65-b73044b1c6fd",
      "name": "Supabase2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4244c0ca-eef1-4674-ae75-8c7f9f06018b",
              "name": "Last_modified_date",
              "value": "={{ $json[\"Last_modified_date\"] + \"Z\" }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        -48
      ],
      "id": "4f5fa62f-a82f-4fdc-abec-5d5b49086337",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "=n8n_metadata",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $json.file_title }}",
            "url": "={{ $json.file_url }}",
            "sharepoint_file_id": "={{ $json.sharepoint_file_id }}",
            "id_source": "={{ $json.file_id }}",
            "last_modified_date": "={{ $json.last_modified_date }}"
          },
          "matchingColumns": [
            "id_source"
          ],
          "schema": [
            {
              "id": "id_source",
              "displayName": "id_source",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "last_modified_date",
              "displayName": "last_modified_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "sharepoint_file_id",
              "displayName": "sharepoint_file_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "sharepoint_folder_name",
              "displayName": "sharepoint_folder_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1568,
        256
      ],
      "id": "a33bf13e-1d8f-444d-8655-fab5feed8663",
      "name": "Insert Document Metadata2",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "n8n_testmistral",
          "mode": "list",
          "cachedResultName": "n8n_testmistral"
        },
        "options": {
          "queryName": "match_n8n_testmistral"
        }
      },
      "id": "01f5aafa-e447-4f65-bb74-3cdb696815e5",
      "name": "Insert into Supabase Vectorstore2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        3888,
        240
      ]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "12C6waY6ky42NZiXaGx0PkZ7SCO4f0PCt",
            "mode": "list",
            "cachedResultName": "Team Knowledge Bot Documents",
            "cachedResultUrl": "https://drive.google.com/drive/folders/12C6waY6ky42NZiXaGx0PkZ7SCO4f0PCt"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        80,
        224
      ],
      "id": "6ab603b9-f25b-42e0-a0b0-377dd273253d",
      "name": "Google Drive"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id_source }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1760,
        240
      ],
      "id": "eee2ff64-6e31-4689-81b1-ce3975cde97e",
      "name": "Google Drive3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1744,
        -155.0535005500517
      ],
      "id": "5574a39f-bd09-4ea5-99d3-ba8bce543a84",
      "name": "AI Agent"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-02T16:12:12.081Z",
      "updatedAt": "2025-09-02T16:12:12.081Z",
      "role": "workflow:owner",
      "workflowId": "eaATC5EZqH8HDVna",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-09-02T16:12:12.000Z",
  "versionId": "cfdec322-d64b-4d34-aca1-ffa243213fbc"
}