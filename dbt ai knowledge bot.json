{
  "active": true,
  "connections": {
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Create a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [],
        [],
        [],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        []
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Upload": {
      "main": [
        [
          {
            "node": "Mistral Signed URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Signed URL": {
      "main": [
        [
          {
            "node": "Mistral DOC OCR3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral DOC OCR3": {
      "main": [
        [
          {
            "node": "Mistral file delete5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Mistral Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore2": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Google Drive3": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Web Search 2": {
      "ai_tool": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Web Search 1": {
      "ai_tool": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "team knowledge agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "team knowledge agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Mistral Cloud1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a row": {
      "main": [
        [
          {
            "node": "Google Drive3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "list documents": {
      "ai_tool": [
        [
          {
            "node": "team knowledge agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-17T00:20:26.822Z",
  "id": "yEQHKqAM1L1QSDle",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "dbt ai knowledge bot",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        896,
        288
      ],
      "id": "9a8a1ce8-faca-4de0-be04-593bc52cf0f2",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            },
            {
              "id": "fae402c8-c486-4b57-8d28-bf669db6b442",
              "name": "last_modified_date",
              "value": "={{ $json.modifiedTime }}",
              "type": "string"
            },
            {
              "id": "866ce582-16e2-4869-ac77-13f248c187eb",
              "name": "drive_file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "8287795d-32bd-45c6-ac9b-d2df761ef57b",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1312,
        304
      ]
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "sharepoint_file_id",
              "field2": "UniqueId"
            },
            {
              "field1": "Last_modified_date",
              "field2": "TimeLastModified"
            },
            {
              "field1": "Loading Done",
              "field2": "Exists"
            }
          ]
        },
        "fuzzyCompare": true,
        "options": {}
      },
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        512,
        208
      ],
      "id": "3811c918-c1cb-491f-8e20-0b09f77735ee",
      "name": "Compare Datasets"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('Set File ID1').item.json.file_title.replaceSpecialChars() }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $('If1').item.json.embedding_text }}",
              "type": "string"
            },
            {
              "id": "bd7406b5-d857-4e8d-ad62-07c6ce279121",
              "name": "Workflow_name",
              "value": "={{ $json.workflow_name }}",
              "type": "string"
            },
            {
              "id": "e0a783f1-89e0-4d87-b9c0-149fedd0976b",
              "name": "Version",
              "value": "={{ $json.version }}",
              "type": "string"
            },
            {
              "id": "ec220cb8-6bb9-49fc-bd3b-9ab4b0154de4",
              "name": "Workflow Url",
              "value": "={{ $json.workflow_url }}",
              "type": "string"
            },
            {
              "id": "b2795292-8cad-4c03-a329-88a467f1c47e",
              "name": "Status",
              "value": "={{ $json.status }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3344,
        560
      ],
      "id": "8805232c-a265-4da3-8937-8181d9a27a2a",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "={{ $('Set File ID1').item.json.file_id +\"_\"+ $json.fileName    }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4016,
        -48
      ],
      "id": "a207ce0e-29a8-4096-91d8-3456414e064f",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\": \"{{$json['image_base64'].split(',').pop()}}\",\n  \"fileName\": \"{{$json.id}}\",\n  \"mimeType\": \"image/jpeg\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3760,
        -48
      ],
      "id": "55df018c-8e91-4d09-83ae-8919750e5e4b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7e6dcc66-0501-4739-a738-909878c4b23d",
              "name": "images",
              "value": "={{ $json.images }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3360,
        -48
      ],
      "id": "5d0d7c6a-cb19-47c4-a210-c7c7c849f5cb",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "fieldToSplitOut": "images",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3600,
        -48
      ],
      "id": "49e9cf2b-4021-4958-9fc5-4871a0ae6ab7",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "dbtchat",
        "fileName": "=",
        "additionalFields": {
          "parentFolderKey": "extracted_imagesdbtkb"
        }
      },
      "type": "n8n-nodes-base.s3",
      "typeVersion": 1,
      "position": [
        4208,
        -48
      ],
      "id": "c1d03ae9-b70b-42c4-9710-d4f0fe05d5fa",
      "name": "S3",
      "retryOnFail": true,
      "credentials": {
        "s3": {
          "id": "wiQmr2ESGRzBZRpP",
          "name": "S3 account new rn"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "d15e917b-43d2-40b8-8b49-af467ff63961",
              "leftValue": "={{ $json.data[0].parseJson().skipped }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2880,
        288
      ],
      "id": "61d7d424-f4b6-4d86-889c-751aeaf76d7a",
      "name": "If1"
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.content.parseJson().pageContent.toJsonString() }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "source",
                "value": "={{ $('Edit Fields4').item.json[' source'] }}"
              },
              {
                "name": "blobType",
                "value": "application/jsonb"
              },
              {
                "name": "loc",
                "value": "={{ $json.content.parseJson().metadata.loc }}"
              },
              {
                "name": "source_metadata_id",
                "value": "={{ $('Set File ID1').item.json.file_id }}"
              },
              {
                "name": "project name",
                "value": "={{ $('Edit Fields4').item.json.PROJECT }}"
              },
              {
                "name": "documnet_type",
                "value": "={{ $('Edit Fields4').item.json.DOCUMENT_TYPE }}"
              },
              {
                "name": "last _edit",
                "value": "={{ $('Edit Fields4').item.json.last_edit }}"
              },
              {
                "name": "source_url",
                "value": "={{ $('Edit Fields4').item.json.source_url }}"
              }
            ]
          }
        }
      },
      "id": "4bfa1c54-5ec6-436d-9b8c-7324dfde5a37",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        3936,
        528
      ]
    },
    {
      "parameters": {
        "chunkSize": 100000
      },
      "id": "2a30f422-b568-4296-b658-d8cb2634d845",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        3856,
        752
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "7d2ee6fd-59c9-4e5b-b9e1-cb21df9930d5",
      "name": "Mistral Upload",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2112,
        304
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "e3fe8ec6-f494-4f2f-a5a7-786101a0ca63",
      "name": "Mistral Signed URL",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2288,
        288
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"bbox_annotation_format\": {\n    \"type\": \"json_schema\",\n    \"json_schema\": {\n      \"schema\": {\n        \"properties\": {\n          \"image_type\": { \"title\": \"Image_Type\", \"type\": \"string\", \"description\": \"type of image\" },\n          \"short_description\": { \"title\": \"Short_Description\", \"type\": \"string\", \"description\": \"short description\" },\n          \"summary\": { \"title\": \"Summary\", \"type\": \"string\", \"description\": \"summary of the image\" }\n        },\n        \"required\": [\"image_type\",\"short_description\",\"summary\"],\n        \"title\": \"BBOXAnnotation\",\n        \"type\": \"object\",\n        \"additionalProperties\": false\n      },\n      \"name\": \"bbox_annotation\",\n      \"strict\": true\n    }\n  },\n  \"include_image_base64\": true\n}\n\n",
        "options": {}
      },
      "id": "3296212a-d20b-4eb5-83bb-30b31f29604f",
      "name": "Mistral DOC OCR3",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2448,
        288
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=https://api.mistral.ai/v1/files/{{ $('Mistral Upload').item.json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mistralCloudApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "0e104296-09ad-4225-94a7-aa175723e459",
      "name": "Mistral file delete5",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2576,
        112
      ],
      "typeVersion": 4.2,
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "$input.item.binary.data.fileName = $input.first().json.title\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1856,
        304
      ],
      "id": "8be0fe0f-19f6-468f-b3e8-8d4869d5365f",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "// n8n Function node\n// Keeps image array from input, inserts embedding_text inline with images\n\nconst pages = items[0].json.pages;\nlet output = [];\n\nfor (const page of pages) {\n  let text = `Page ${page.index}\\n\\n`;\n  let markdown = page.markdown;\n\n  // Replace each image markdown with annotation text if available\n  markdown = markdown.replace(/!\\[(.*?)\\]\\((.*?)\\)/g, (match, alt, src) => {\n    const img = page.images.find(i => i.id === src || i.fileName === src);\n    if (img && img.image_annotation) {\n      const ann = JSON.parse(img.image_annotation);\n      return (\n        '{' +\n        `Image: [${img.id}]\\n` +\n        `Type: ${ann.image_type}\\n` +\n        `Short: ${ann.short_description}\\n` +\n        `Summary: ${ann.summary}\\n` +\n        '}'\n      );\n    }\n    return \"\"; // if no annotation, strip it\n  });\n\n  text += markdown.trim();\n\n  output.push({\n    json: {\n      page_index: page.index,\n      embedding_text: text,\n      images: page.images   // ✅ keep original images array\n    }\n  });\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        288
      ],
      "id": "142b7e23-c0f9-4d0b-ad2b-7d8e65ccd05b",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// Code10 (idempotent): If input is already chunked, pass through. Otherwise perform chunking.\n// Config:\nconst DEFAULT_CHUNK_SIZE = 2000;   // desired chunk size\nconst DEFAULT_OVERLAP = 0.3;       // 30% overlap\n\n// Helpers\nfunction isAlreadyChunkedInput(items) {\n  // Heuristic: if the first item content is a JSON string with pageContent OR metadata includes chunk_index\n  if (!items || items.length === 0) return false;\n  try {\n    const first = items[0].json;\n    if (!first) return false;\n    // if content looks like already chunked object stringified\n    if (typeof first.content === 'string') {\n      const parsed = JSON.parse(first.content);\n      if (parsed && (parsed.pageContent || parsed.metadata?.chunk_index !== undefined)) {\n        return true;\n      }\n    }\n    // or if the node already has chunk metadata at top level\n    if (first.metadata && first.metadata.chunk_index !== undefined) return true;\n    // or if the input is many short items likely produced by splitter -> treat as already split\n    if (items.length > 1 && items.every(it => (it.json.content || '').length <= DEFAULT_CHUNK_SIZE)) {\n      return true;\n    }\n  } catch (e) {\n    // ignore parse errors -> assume not chunked\n  }\n  return false;\n}\n\nfunction getObjLength(obj) {\n  return (obj.content || '').length;\n}\nfunction getObjLengthofTextOnly(obj) {\n  if (obj.type === 'image_ocr') return 0;\n  return (obj.content || '').length;\n}\n\n// split with overlap for a single large text string\nfunction splitTextWithOverlap(text, chunkSize, overlap) {\n  const step = Math.max(1, Math.floor(chunkSize * (1 - overlap)));\n  const parts = [];\n  for (let start = 0; start < text.length; start += step) {\n    parts.push(text.slice(start, start + chunkSize));\n  }\n  return parts;\n}\n\n// Main chunking function which accepts an array of objects (items) and returns array of { content, metadata }\nfunction chunkPageItems(arr, source, source_id, pageNum, chunkSize = DEFAULT_CHUNK_SIZE, overlap = DEFAULT_OVERLAP) {\n  // Flatten content strings\n  const pageText = arr.map(it => it.content || '').join(' ');\n\n  // Use splitTextWithOverlap to produce chunks\n  const parts = splitTextWithOverlap(pageText, chunkSize, overlap);\n  const response = [];\n  let charPos = 0;\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    const from = charPos;\n    const to = charPos + (part || '').length;\n    const metadata = {\n      source,\n      source_metadata_id: source_id,\n      loc: { page: pageNum, Characters: { from, to } },\n      chunk_index: i\n    };\n    response.push({\n      content: JSON.stringify({\n        pageContent: [{ type: 'text', content: part }],\n        metadata\n      })\n    });\n    charPos = to;\n  }\n  return response;\n}\n\n// --- Entrypoint ---\nconst incoming = $input.all(); // array of items from previous node\n// If already chunked, pass through (normalize if needed)\nif (isAlreadyChunkedInput(incoming)) {\n  // Optionally normalize metadata for each item if not present\n  const pass = incoming.map((it, idx) => {\n    const json = it.json || {};\n    // ensure content is stringified chunk object (if it's already an object, keep it)\n    if (typeof json.content === 'object' && json.content !== null) {\n      return { json: { content: JSON.stringify(json.content), metadata: json.metadata || {} } };\n    }\n    // if content is a raw string that's small, assume it's already a chunk\n    return { json: { content: json.content, metadata: json.metadata || { chunk_index: idx } } };\n  });\n  return pass;\n}\n\n// Otherwise: Not chunked — perform chunking based on raw document pages\n// We expect input format: first item has fields: 'Document data' (array of pages), 'Document name', and insert metadata node contains id\nconst first = incoming[0] ? incoming[0].json : {};\nconst raw = first['Document data'] || []; // array of page strings\nconst source = first['Document name'] || (first.metadata && first.metadata.source) || '';\n// fallback for source_id from Set File ID node\nlet source_id = '';\ntry {\n  source_id = $('Insert Document Metadata2').first().json.id || $('Set File ID1').first().json.file_id || '';\n} catch (e) {\n  // safe fallback\n  source_id = first.metadata?.source_metadata_id || '';\n}\n\n// Build chunks page by page\nlet allChunks = [];\nraw.forEach((pageText, pageIndex) => {\n  // pageText may be a string or array of small blocks; normalize to array of objects\n  let arr = [];\n  if (Array.isArray(pageText)) {\n    arr = pageText;\n  } else {\n    arr = [{ type: 'text', content: pageText }];\n  }\n  const pageChunks = chunkPageItems(arr, source, source_id, pageIndex + 1, DEFAULT_CHUNK_SIZE, DEFAULT_OVERLAP);\n  allChunks.push(...pageChunks);\n});\n\n// Return in n8n format\nreturn allChunks.map(c => ({ json: c }));\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3648,
        288
      ],
      "id": "bd1e2bf0-4218-45f2-a1ff-db039b2b1e4e",
      "name": "Code10"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        3792,
        512
      ],
      "id": "289b6d0f-b73b-4b05-abf7-3faf4694196b",
      "name": "Embeddings Mistral Cloud",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Document data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3488,
        288
      ],
      "id": "3262cdde-493c-4419-afa6-2a28240744b4",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4224,
        288
      ],
      "id": "c99fd99f-f33b-41a0-831f-28b947faf912",
      "name": "Wait",
      "webhookId": "3b2de32e-b543-4a03-90cd-9b05e423339a"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4448,
        -16
      ],
      "id": "955cc1f0-30b1-45c8-b47f-f43b8989e583",
      "name": "Wait2",
      "webhookId": "a93353d9-cb90-4f0c-bdf0-423c0ae9af9d"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2592,
        288
      ],
      "id": "a0dd1a12-9fcb-4f2d-9599-35335f670eea",
      "name": "Wait3",
      "webhookId": "2dbecc76-246b-4613-92c2-d0581a190786"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node - SharePoint URL with Version Parameter\n// Use this in a \"Code\" node in n8n\n\nconst items = $input.all();\n\nconst outputItems = items.map(item => {\n  const data = item.json;\n  \n  // Use existing LinkingUrl if available\n  if (data.LinkingUrl) {\n    return {\n      json: {\n        ...data,\n        fileUrl: data.LinkingUrl\n      }\n    };\n  }\n  \n  // Construct versioned URL\n  let fileUrl = '';\n  \n  if (data.ServerRelativeUrl && data.ContentTag) {\n    // Base URL with server relative path\n    fileUrl = 'https://nosta.sharepoint.com' + data.ServerRelativeUrl;\n    \n    // Extract GUID from ContentTag and create version parameter\n    const guidMatch = data.ContentTag.match(/\\{([^}]+)\\}/);\n    if (guidMatch) {\n      const versionId = guidMatch[1].toLowerCase().replace(/-/g, '');\n      fileUrl += `?d=w${versionId}`;\n    }\n  }\n  \n  return {\n    json: {\n      ...data,\n      fileUrl: fileUrl\n    }\n  };\n});\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        304
      ],
      "id": "30724bbc-0970-4671-8052-936e15ac2d74",
      "name": "Code12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4244c0ca-eef1-4674-ae75-8c7f9f06018b",
              "name": "Last_modified_date",
              "value": "={{ $json[\"Last_modified_date\"] + \"Z\" }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        336,
        -16
      ],
      "id": "bdd68112-b5bc-4e5f-8f23-cbd9be3b0c5a",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "ai_kb",
          "mode": "list",
          "cachedResultName": "ai_kb"
        },
        "options": {
          "queryName": "match_ai_kbdbt"
        }
      },
      "id": "af904834-b3dd-41da-9681-c5098bb5c827",
      "name": "Insert into Supabase Vectorstore2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        3872,
        288
      ],
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "searchMethod": "query",
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1MQuZ6zIPn-oSWnhGiGLzisqWX9oaMig3",
            "mode": "list",
            "cachedResultName": "Temp kb",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1MQuZ6zIPn-oSWnhGiGLzisqWX9oaMig3"
          }
        },
        "options": {
          "fields": [
            "id",
            "name",
            "webViewLink",
            "mimeType",
            "*"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        208,
        272
      ],
      "id": "e0b43906-190c-4da5-ad7d-f48d3c984ffb",
      "name": "Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1712,
        304
      ],
      "id": "467509f1-c43b-4459-8cd2-ce41859e95d6",
      "name": "Google Drive3",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "xS6kSuLaEkasxHtm",
          "name": "Google Drive account 6 rn dbt"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const text = (items[0].json.embedding_text || '').replace(/\\r/g, '');\n\n// Generic extractor for key-based fields\nconst getVal = (label) => {\n  // Match \"Label: value\" on same line\n  let regex = new RegExp(`${label}\\\\s*[:\\\\-–]?\\\\s*([^\\\\n]+)`, 'i');\n  let m = text.match(regex);\n  let val = m ? m[1].trim() : '';\n\n  // If still empty → look at the next line\n  if (!val) {\n    regex = new RegExp(`${label}\\\\s*[:\\\\-–]?[ \\\\t]*[\\\\n]+([^\\\\n]+)`, 'i');\n    m = text.match(regex);\n    val = m ? m[1].trim() : '';\n  }\n\n  // Clean pipes/markdown\n  val = val.replace(/^\\|/, '').replace(/\\|$/, '').trim();\n  val = val.replace(/^\\*\\*/, '').replace(/\\*\\*$/, '').trim();\n  return val;\n};\n\n// Special handling for workflow_url\nlet workflowUrl = getVal('Workflow Url');\n\n// Fallback → first http(s) link anywhere in the text\nif (!workflowUrl) {\n  const urlMatch = text.match(/https?:\\/\\/[^\\s)]+/i);\n  workflowUrl = urlMatch ? urlMatch[0].trim() : '';\n}\n\nreturn [{\n  json: {\n    workflow_name: getVal('Workflow Name'),\n    version: getVal('Version'),\n    workflow_url: workflowUrl,\n    status: getVal('Status') || getVal('Deployed At')\n  }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2624,
        656
      ],
      "id": "56a7c694-a7b1-4907-a0ee-341f6d6c9066",
      "name": "Code1"
    },
    {
      "parameters": {
        "content": "## MISTRAL OCR\n",
        "height": 464,
        "width": 624,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2080,
        80
      ],
      "typeVersion": 1,
      "id": "6457065a-24e7-42be-bd1d-0a0e5a92e5ae",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "ai_kb",
          "mode": "list",
          "cachedResultName": "ai_kb"
        },
        "topK": 5,
        "options": {
          "queryName": "match_ai_kbdbt"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1920,
        1424
      ],
      "id": "724fb08d-7493-48ea-9316-7ca29c8f9798",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Web Search tool only SAP websites",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{query}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"advanced\",\n  \"max_results\": 20,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [\"https://help.sap.com/docs/\",\"https://community.sap.com/\"],\n  \"exclude_domains\": []\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search Querry",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2448,
        1344
      ],
      "id": "2fc689cc-292c-4983-ad13-ec993cd39e09",
      "name": "Web Search 2"
    },
    {
      "parameters": {
        "toolDescription": "Web Search tool excluding SAP websites",
        "method": "POST",
        "url": "https://api.tavily.com/search",
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Authorization",
              "valueProvider": "fieldValue",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{query}\",\n  \"topic\": \"general\",\n  \"search_depth\": \"advanced\",\n  \"max_results\": 20,\n  \"include_answer\": true,\n  \"include_raw_content\": false,\n  \"include_images\": false,\n  \"include_image_descriptions\": false,\n  \"include_domains\": [],\n  \"exclude_domains\": [\"https://help.sap.com/docs/\",\"https://community.sap.com/\"]\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search Querry",
              "type": "string"
            }
          ]
        },
        "optimizeResponse": true
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2240,
        1344
      ],
      "id": "d7ef7435-a0c4-4d9e-bb39-2af12d1bd3f6",
      "name": "Web Search 1"
    },
    {
      "parameters": {
        "model": "mistral-medium-latest",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1264,
        1408
      ],
      "id": "4c8aad7d-e533-4ef5-a649-9e81556d798a",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "public": true,
        "options": {
          "customCss": ":root {\n  /* Brand Colors (Nosta) */\n  --chat--color-primary: #009EE3; /* Nosta Azure‑blue */\n  --chat--color-primary-shade-50: #007bb8;\n  --chat--color-primary-shade-100: #005d8f;\n  --chat--color-secondary: #582DC6; /* Nosta Violet accent */\n  --chat--color-secondary-shade-50: #461fa1;\n  --chat--color-secondary-shade-100: #36197a;\n  --chat--color-white: #FFFFFF;\n  --chat--color-light: #E4E4E4; /* light grey surfaces & borders */\n  --chat--color-light-shade-50: #d1d1d1;\n  --chat--color-light-shade-100: #bdbdbd;\n  --chat--color-medium: #B5BCC9;\n  --chat--color-dark: #000000; /* solid black text */\n  --chat--color-disabled: #9FA6B2;\n  --chat--color-typing: #555555;\n  --chat--header-height: 4rem;\n\n  /* Layout & Fonts */\n  --chat--spacing: 1rem;\n  --chat--border-radius: 0.5rem;\n  --chat--font-family: 'Roboto', system-ui, sans-serif;\n  --chat--heading-font-family: 'Poppins', system-ui, sans-serif;\n\n  /* Window */\n  --chat--window--width: 420px;\n  --chat--window--height: 600px;\n  --chat--window--z-index: 9999;\n  --chat--window--border: 1px solid var(--chat--color-light-shade-100);\n  --chat--window--border-radius: var(--chat--border-radius);\n\n  /* Header */\n  --chat--header--padding: 0.75rem;                    /* 50% less height */\n  --chat--header--background: var(--chat--color-primary-shade-100); /* deeper blue */\n  --chat--header--color: var(--chat--color-white);\n  --chat--heading--font-size: 1.8em;\n  --chat--subtitle--font-size: 1rem;\n  --chat--subtitle--line-height: 1.5;\n\n  /* Messages */\n  --chat--message--font-size: 1rem;\n  --chat--message--padding: 0.8rem 1rem;\n  --chat--message--border-radius: var(--chat--border-radius);\n  --chat--message--margin-bottom: 0.35rem; /* less spacing */\n  --chat--message-line-height: 1.6;\n  --chat--message--bot--background: #97979738;\n  --chat--message--bot--color: var(--chat--color-dark);\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--pre--background: #e8ecf1;\n\n  /* Input */\n  --chat--textarea--height: 52px;\n  --chat--input--background: var(--chat--color-white);\n  --chat--input--text-color: var(--chat--color-dark);\n  --chat--input--padding: 0.75rem 1rem;\n  --chat--input--border: 1px solid var(--chat--color-light-shade-50);\n  --chat--input--border-radius: var(--chat--border-radius);\n\n  /* Buttons */\n  --chat--button--background: var(--chat--color-secondary);\n  --chat--button--color: var(--chat--color-white);\n  --chat--button--hover--background: var(--chat--color-secondary-shade-50);\n  --chat--button--hover--color: var(--chat--color-white);\n  --chat--button--padding: 0.5rem 1.2rem;\n  --chat--button--border-radius: var(--chat--border-radius);\n\n  /* Footer */\n  --chat--body--background: var(--chat--color-light);\n  --chat--footer--background: var(--chat--color-white);\n  --chat--footer--color: var(--chat--color-dark);\n}\n\n/* Structure */\nbody {\n  margin: 0;\n  font-family: var(--chat--font-family);\n  background: var(--chat--body--background);\n}\n\n.chat-window {\n  width: var(--chat--window--width);\n  height: var(--chat--window--height);\n  margin: 2rem auto;\n  border: var(--chat--window--border);\n  border-radius: var(--chat--window--border-radius);\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n}\n\n.chat-layout .chat-header {\n    background-repeat: no-repeat;\n    background-size: contain;\n    background-position: right center;\n    background-image: url(https://www.nosta.com/wp-content/themes/kd-theme/resources/img/nosta.jpg);\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    gap: 1em;\n    height: var(--chat--header-height);\n    padding: var(--chat--header--padding);\n    background-color: var(--chat--header--background);\n    color: var(--chat--header--color);\n    border-top: var(--chat--header--border-top);\n    border-bottom: var(--chat--header--border-bottom);\n    border-left: var(--chat--header--border-left);\n    border-right: var(--chat--header--border-right);\n}\n\n.chat-logo {\n  height: 40px;\n  width: auto;\n}\n\n.chat-header-text h1 {\n  margin: 0;\n  font-family: var(--chat--heading-font-family);\n  font-weight: 600;\n  font-size: var(--chat--heading--font-size);\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.chat-header-text p {\n  margin: 0.25rem 0 0;\n  font-size: var(--chat--subtitle--font-size);\n  line-height: var(--chat--subtitle--line-height);\n}\n\n/* Chat body */\n.chat-body {\n  flex: 1;\n  padding: var(--chat--spacing);\n  background: var(--chat--body--background);\n  overflow-y: auto;\n}\n\n.chat-message {\n  padding: var(--chat--message--padding);\n  margin-bottom: var(--chat--message--margin-bottom);\n  border-radius: var(--chat--message--border-radius);\n  font-size: var(--chat--message--font-size);\n  line-height: var(--chat--message-line-height);\n  max-width: 80%;\n  box-shadow: 0px 5px 9px 3px rgb(0 0 0 / 12%);\n  width: fit-content;\n}\n\n.chat-message.bot {\n  background: var(--chat--message--bot--background);\n  color: var(--chat--message--bot--color);\n  border-left: 3px solid var(--chat--color-primary);\n}\n\n.chat-message.user {\n  background: var(--chat--message--user--background);\n  color: var(--chat--message--user--color);\n  border-left: 3px solid var(--chat--color-secondary);\n  margin-left: auto;\n}\n\n/* Footer */\n.chat-footer {\n  background: var(--chat--footer--background);\n  padding: 0.5rem 1rem;\n  border-top: 1px solid var(--chat--color-light-shade-100);\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.chat-footer textarea {\n  flex-grow: 1;\n  resize: none;\n  padding: var(--chat--input--padding);\n  height: var(--chat--textarea--height);\n  border: var(--chat--input--border);\n  border-radius: var(--chat--input--border-radius);\n  font-family: var(--chat--font-family);\n  font-size: 1rem;\n  color: var(--chat--input--text-color);\n  background: var(--chat--input--background);\n}\n\n.chat-send-button {\n  background: var(--chat--button--background);\n  color: var(--chat--button--color);\n  border: none;\n  padding: var(--chat--button--padding);\n  border-radius: var(--chat--button--border-radius);\n  font-size: 1.25rem;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.chat-send-button:hover {\n  background: var(--chat--button--hover--background);\n}\n\nimg {\n    width: -webkit-fill-available;\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        1040,
        1040
      ],
      "id": "00154a34-0151-46a4-a69e-3631a63480f4",
      "name": "When chat message received",
      "webhookId": "3c61c08a-9714-43dd-96d8-608b30397eeb"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=AI Support Agent Prompt\nPersona\nYou are a helpful, intelligent AI support SD agent and are a proactive chat agent. Lead the conversation by asking open-ended questions and offering suggestions. Don’t wait for the user to guide the chat — keep it moving with helpful, friendly prompts. Anticipate needs, follow up thoughtfully, and make the user feel supported throughout.\n\nuse list dcoument tool to get more details data about given document \n\nKnowledge Access Instructions\nPrimary Source: For every user question, always use the Supabase ( ai_kb table) as the primary source.\n\nInitial Search: Begin each query by searching only in Supabase (ai_kb ).\n\nSupabase Found: If relevant information is found in Supabase:\n\nRespond in English.\n\nProvide the textual information first.\n\nInsert relevant image(s) immediately after the specific paragraph or section they relate to.\n\nYou must cite the internal document name and provide the internal document URL.\n\nExample:\n\"For your reference, this information is based on the internal documentatio(Anwenderdoku_Lieferplan mit Abruf EDI). For more detailed guidance, you can access the internal document using the following URL:https://docs.google.com/document/d/110npvMDrPp4DkY5A18NLjBx8QXWomSaa/edit#heading=h.p71y513zojx\"\n\ndisplay workflow url, version ,workflow name and status\n\nSupabase Not Found: If no relevant information is found in Supabase, respond to the user with:\n\n\"The information you requested is not available in our internal documentation. Would you like me to do a Web search?\"\n\nWeb Search Permission:\n\nDo NOT use web search tools automatically.\n\nWait for the user's explicit confirmation (e.g., \"Yes\", \"Okay\", \"Please do\", etc.).\n\nPerforming a Web Search:\n\nOnly after receiving user permission, perform a web search.\n\nUse both web search 1 and web search 2 tools.\n\nQueries must be a single string in English.\n\nClearly state that the information is from an external source.\n\nExample:\n\"This information comes from an external source (e.g., from a relevant website)...\"\n\nImportant Rules & Logic\nSearch Scope: After getting permission for a web search, use it only for the immediate response. Return to using Supabase for all subsequent queries unless the user explicitly asks for external help again.\n\nNo Data Found: If no data is found in Supabase or the web, respond with:\n\n\"At the moment, there is no information available to fully address this request based on current internal and external sources.\"\n\nImage Formatting:\n\nImages must be placed inline, immediately following the text they illustrate.\n\nUse this exact format:\n\n![image](https://qpmrmtlfwlixlplwpllz.supabase.co/storage/v1/object/public/dbtchat/extracted_imagesdbtkb/\"+ document_metadata_id + \"_\" + image_name +\")\n\nExample:\n![image](https://qpmrmtlfwlixlplwpllz.supabase.co/storage/v1/object/public/dbtchat/extracted_imagesdbtkb/1SCQXpDQIjCppT32dk54Zs3Nzdoq4syu-_image10.png)\n\nFormat & Style Guidelines\nLanguage: All Supabase queries and all user responses must be in English.\n\nTone: Responses must be Professional, Clear, and helpful. They should be as concise as possible while remaining precise and well-structured.\n\nInstructional Format: For guide or instruction-based responses, only use the following format:\n\nalso fetch and display workflow url, version ,workflow name and status\n\nStep-by-Step Guide\n\nThings To Consider\n\nFurther Understanding\n\nUnder \"Further Understanding,\" do not ask for related questions. Instead, provide two bullet points suggesting what topic to explore next based on the user's question.\n\nThings to Consider/Important Details/Common Pitfalls\nYou should actively work to avoid common errors and pay close attention to important details, ensuring none are overlooked while performing the task.\n\n\nalways include documemt soucrce dco name and  (with url) at the end",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1744,
        1088
      ],
      "id": "1a61e3a5-db23-4252-9392-aed2f229ac02",
      "name": "team knowledge agent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "03c4b591-d635-40ec-82b6-ffa42edda35f",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1024,
        1312
      ],
      "id": "7105961e-f3d6-4bf4-853a-abe41511a52a",
      "name": "Webhook",
      "webhookId": "03c4b591-d635-40ec-82b6-ffa42edda35f"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        2112,
        1088
      ],
      "id": "14ad9f6c-9186-49da-b016-cb9e617338ee",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6940b28a-4db7-47c1-b86b-2ebd7cc40eca",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1520,
        1088
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsMistralCloud",
      "typeVersion": 1,
      "position": [
        2032,
        1648
      ],
      "id": "6750781e-3bfc-42fb-8fee-fddd078804f9",
      "name": "Embeddings Mistral Cloud1",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "text": "=\n{{ $('Google Drive3').item.json.title }}",
        "attributes": {
          "attributes": [
            {
              "name": "document_type",
              "description": "type of document this can be blog, user documentation, technical documentation, manual/guide, educational"
            },
            {
              "name": "project",
              "description": " from give project this can any one   nosta\n\n ,social/digimarketing , timesheet, chatbot, knowledge bot if nothing that its dbt "
            },
            {
              "name": "assigned_to",
              "description": "### Project Assignments  \n\n- **SASTHA AI**  \n  Handled by: [Rajeet]  \n  Files:  \n  - Sasthaireal-estate agent (5).docx.pdf  \n  - Sastha AI Utility Bill Management System - User Documentation.docx  \n\n- **NOSTA**  \n  Handled by: [Ayan, Anusha, Rajeet]  \n  Files:  \n  - NOSTA SD Agent Architecture with Google Drive Integration.docx  \n  - NOSTA Flows Document  \n  - NOSTA SD Agent – Risk Assessment Table  \n  - NOSTA SD Agent Architecture with Google Drive Integration  \n\n- **TIMESHEET**  \n  Handled by: [Anantha]  \n  Files:  \n  - Timesheet Blog.docx  \n\n- **DBT (Blogs)**  \n  Handled by: [DBT Team]  \n  Files:  \n  - (All remaining blog files)\n"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.  \nOnly extract relevant information from the text.  \n\n### Data  \n\n#### Project: Sastha AI  \n- Assigned to: Rajeet  \n- Files:  \n  - Sasthaireal-estate agent (5).docx.pdf  \n  - Sastha AI Utility Bill Management System - User Documentation.docx  \n\n#### Project: Nosta  \n- Assigned to: Ayan, Anusha, Rajeet  \n- Files:  \n  - NOSTA SD Agent Architecture with Google Drive Integration.docx  \n  - NOSTA Flows Document  \n  - NOSTA SD Agent – Risk Assessment Table  \n  - NOSTA SD Agent Architecture with Google Drive Integration  \n\n#### Project: Timesheet  \n- Assigned to: Anantha  \n- Files:  \n  - Timesheet Blog.docx  \n\n#### Project: DBT (Blogs)  \n- Assigned to: —  \n- Files:  \n  - (All remaining blog files)\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        3040,
        288
      ],
      "id": "79083ea7-f17c-4b85-abcf-52da11efa2b0",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5132d92c-41da-4a55-ad79-0c329ca7e626",
              "name": "Document name",
              "value": "={{ $('Google Drive3').item.json.title }}",
              "type": "string"
            },
            {
              "id": "c8160701-2be7-43c6-bcfa-295fbebe0e23",
              "name": "Document data",
              "value": "={{ $('If1').item.json.embedding_text }}",
              "type": "string"
            },
            {
              "id": "1087ab34-5643-4755-b545-cf34d0ae2cd2",
              "name": " source",
              "value": "=google drive",
              "type": "string"
            },
            {
              "id": "4317aa31-d9fd-4adc-ab26-b48c208041b3",
              "name": "ASSIGNEDTO",
              "value": "={{ $json.output.assigned_to.split(\",\") }}",
              "type": "string"
            },
            {
              "id": "7a61d775-06b1-42e2-a82a-d8e756fa5586",
              "name": "PROJECT",
              "value": "={{ $json.output.project }}",
              "type": "string"
            },
            {
              "id": "300f49d6-8851-458d-a296-8ceb68ebdd5f",
              "name": "DOCUMENT_TYPE",
              "value": "={{ $json.output.document_type }}",
              "type": "string"
            },
            {
              "id": "7e0207f7-c5fe-4022-88c6-ba86146f8864",
              "name": "last_edit",
              "value": "={{ $('Set File ID1').item.json.last_modified_date }}",
              "type": "string"
            },
            {
              "id": "fe25b4b4-e547-4646-ae2e-7cf60d74fcb9",
              "name": "source_url",
              "value": "={{ $('Set File ID1').item.json.file_url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3312,
        288
      ],
      "id": "46b6961c-1601-44cb-87f9-d273d6cd78ec",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "model": "mistral-medium-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        3056,
        544
      ],
      "id": "d27834eb-b4b9-4bef-9421-ed3ba2f9d567",
      "name": "Mistral Cloud Chat Model1",
      "credentials": {
        "mistralCloudApi": {
          "id": "k9FknrnRcIKYNX7T",
          "name": "Mistral Cloud account 2 dbt rn"
        }
      }
    },
    {
      "parameters": {
        "tableId": "dbtai_kb",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "id",
              "fieldValue": "={{ $json.file_id }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.file_title }}"
            },
            {
              "fieldId": "url",
              "fieldValue": "={{ $json.file_url }}"
            },
            {
              "fieldId": "last_modified_date",
              "fieldValue": "={{ $json.last_modified_date }}"
            },
            {
              "fieldId": "drive_file_id",
              "fieldValue": "={{ $json.drive_file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1488,
        304
      ],
      "id": "2e64e52b-41eb-43d3-8756-66f81d051a84",
      "name": "Create a row",
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "dbtai_kb",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Google Drive3').item.json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "source",
              "fieldValue": "={{ $json[' source'] }}"
            },
            {
              "fieldId": "assignedto",
              "fieldValue": "={{ $json.ASSIGNEDTO }}"
            },
            {
              "fieldId": "document_type",
              "fieldValue": "={{ $json.DOCUMENT_TYPE }}"
            },
            {
              "fieldId": "project",
              "fieldValue": "={{ $json.PROJECT }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3552,
        160
      ],
      "id": "159c5fc7-352c-40c2-b0f5-bdd3129dd38c",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1552,
        1408
      ],
      "id": "c7f1af81-ee31-49e1-9423-26cd536af220",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "operation": "getAll",
        "tableId": "dbtai_kb",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1696,
        1424
      ],
      "id": "3a99b3de-a3ff-4e54-b074-df27869825ef",
      "name": "list documents",
      "credentials": {
        "supabaseApi": {
          "id": "HCQXqjukUb1jxXPk",
          "name": "Supabase account 4(rn dbt)"
        }
      }
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "rajeetcodeN",
    "name": "n8n_backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-17T00:20:26.829Z",
      "updatedAt": "2025-09-17T00:20:26.829Z",
      "role": "workflow:owner",
      "workflowId": "yEQHKqAM1L1QSDle",
      "projectId": "ZwnuQmKDS754LNCN"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-09-25T08:13:18.000Z",
  "versionId": "37d97902-7fa9-4b60-b159-eae71a15a15f"
}